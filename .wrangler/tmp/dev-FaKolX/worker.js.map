{
  "version": 3,
  "sources": ["../bundle-DA81Xz/checked-fetch.js", "../../../src/lib/sources/google.js", "../../../src/lib/sources/serpapi.js", "../../../src/lib/sources/serper.js", "../../../src/lib/sources/yandex.js", "../../../src/lib/sources/brave.js", "../../../src/lib/sources/serphouse.js", "../../../src/lib/sources/adultmedia.js", "../../../src/lib/sources/qualityporn.js", "../../../src/lib/sources/apify.js", "../../../src/lib/robots-checker.js", "../../../src/lib/sources/scrapers.js", "../../../src/lib/sources/adapters.js", "../../../src/lib/provider-ledger.js", "../../../src/lib/adapter-registry.js", "../../../src/lib/search-service.js", "../../../src/lib/validation.js", "../../../src/lib/response.js", "../../../src/lib/rate-limit.js", "../../../src/handlers/aggregate.js", "../../../src/handlers/diagnostics.js", "../../../src/lib/logger.js", "../../../src/handlers/health.js", "../../../src/handlers/provider-selftest.js", "../../../src/worker.js", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-DA81Xz/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-DA81Xz/middleware-loader.entry.ts"],
  "sourceRoot": "C:\\Users\\tanne\\ProjectFolder\\Workspace\\.wrangler\\tmp\\dev-FaKolX",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "export class GoogleProvider {\r\n  constructor() {\r\n    this.name = 'Google'\r\n    this.baseUrl = 'https://www.googleapis.com/customsearch/v1'\r\n    this.dailyCap = 100\r\n    this.monthlyCap = 3000\r\n    this.ttl = 24 * 60 * 60 // 24 hours\r\n    this.batchSize = 10 // Google CSE limit\r\n  }\r\n\r\n  async search(query, options, env) {\r\n    const apiKey = env.GOOGLE_API_KEY\r\n    const cseId = env.GOOGLE_CSE_ID\r\n\r\n    if (!apiKey || !cseId) {\r\n      console.warn('Google API key or CSE ID not configured')\r\n      return []\r\n    }\r\n\r\n    // Check daily cap\r\n    const ledger = options.ledger\r\n    if (ledger) {\r\n      const state = ledger.getProviderState('google')\r\n      if (state.dailyUsed >= this.dailyCap) {\r\n        ledger.markQuotaExceeded('google', this.getNextDailyReset())\r\n        throw new Error('QUOTA_EXCEEDED_DAILY')\r\n      }\r\n    }\r\n\r\n    try {\r\n      const params = new URLSearchParams({\r\n        key: apiKey,\r\n        cx: cseId,\r\n        q: query,\r\n        num: Math.min(options.limit || 10, this.batchSize),\r\n        safe: options.safeMode ? 'active' : 'off'\r\n      })\r\n\r\n      // Add date restriction for freshness\r\n      if (options.fresh && options.fresh !== 'all') {\r\n        const days = options.fresh.replace('d', '')\r\n        if (days && !isNaN(days)) {\r\n          params.set('dateRestrict', `d${days}`)\r\n        }\r\n      }\r\n\r\n      if (options.site) {\r\n        params.set('siteSearch', options.site)\r\n      }\r\n\r\n      const response = await fetch(`${this.baseUrl}?${params}`)\r\n      const data = await response.json()\r\n\r\n      if (!response.ok) {\r\n        if (response.status === 429) {\r\n          if (ledger) ledger.markQuotaExceeded('google', this.getNextDailyReset())\r\n          throw new Error('QUOTA_EXCEEDED')\r\n        }\r\n        throw new Error(`Google API error: ${data.error?.message || response.status}`)\r\n      }\r\n\r\n      // Record usage\r\n      if (ledger) {\r\n        ledger.recordSuccess('google')\r\n        ledger.incrementDailyUsed('google')\r\n      }\r\n\r\n      return this.normalizeResults(data.items || [], options)\r\n\r\n    } catch (error) {\r\n      if (ledger) {\r\n        if (error.message.includes('QUOTA')) {\r\n          ledger.markQuotaExceeded('google', this.getNextDailyReset())\r\n        } else {\r\n          ledger.recordError('google', '5xx')\r\n        }\r\n      }\r\n      throw error\r\n    }\r\n  }\r\n\r\n  normalizeResults(results, options) {\r\n    return results.map(item => ({\r\n      title: item.title || 'No title',\r\n      url: item.link || '#',\r\n      snippet: item.snippet || '',\r\n      published_at: null,\r\n      author: null,\r\n      thumbnail: item.pagemap?.cse_image?.[0]?.src || null,\r\n      score: 1.0,\r\n      extra: {\r\n        provider: 'google',\r\n        displayLink: item.displayLink\r\n      }\r\n    }))\r\n  }\r\n\r\n  getNextDailyReset() {\r\n    const now = new Date()\r\n    const nextReset = new Date(now)\r\n    nextReset.setUTCHours(4, 0, 0, 0)\r\n    if (nextReset <= now) {\r\n      nextReset.setDate(nextReset.getDate() + 1)\r\n    }\r\n    return nextReset.toISOString()\r\n  }\r\n}\r\n", "/**\r\n * SerpApi Provider\r\n * Google Search via SerpApi\r\n */\r\n\r\nexport class SerpApiProvider {\r\n  constructor() {\r\n    this.name = 'SerpApi'\r\n    this.baseUrl = 'https://serpapi.com/search'\r\n    this.version = '1.0.0'\r\n    this.dailyCap = 100\r\n    this.monthlyCap = 3000\r\n    this.ttl = 24 * 60 * 60 // 24 hours\r\n    this.batchSize = 10 // Default batch size\r\n  }\r\n\r\n  async search(query, options, env) {\r\n    const apiKey = env.SERPAPI_KEY\r\n\r\n    if (!apiKey) {\r\n      console.warn('SerpApi API key not configured')\r\n      return []\r\n    }\r\n\r\n    // Check daily cap\r\n    const ledger = options.ledger\r\n    if (ledger) {\r\n      const state = ledger.getProviderState('serpapi')\r\n      if (state.dailyUsed >= this.dailyCap) {\r\n        ledger.markQuotaExceeded('serpapi', this.getNextDailyReset())\r\n        throw new Error('QUOTA_EXCEEDED_DAILY')\r\n      }\r\n    }\r\n\r\n    try {\r\n      const params = new URLSearchParams({\r\n        q: query,\r\n        api_key: apiKey,\r\n        engine: 'google',\r\n        num: Math.min(options.limit || 10, this.batchSize),\r\n        start: 0\r\n      })\r\n\r\n      // Add freshness filter\r\n      if (options.fresh && options.fresh !== 'all') {\r\n        const days = options.fresh.replace('d', '')\r\n        params.append('tbs', `qdr:d${days}`)\r\n      }\r\n\r\n      const response = await fetch(`${this.baseUrl}?${params}`, {\r\n        headers: {\r\n          'User-Agent': 'Jack-Portal/2.0.0'\r\n        },\r\n        cf: { timeout: 10000 }\r\n      })\r\n\r\n      if (!response.ok) {\r\n        if (response.status === 429) {\r\n          if (ledger) ledger.markQuotaExceeded('serpapi', this.getNextDailyReset())\r\n          throw new Error('QUOTA_EXCEEDED')\r\n        }\r\n        throw new Error(`SerpApi error: ${response.status}`)\r\n      }\r\n\r\n      const data = await response.json()\r\n\r\n      // Record success\r\n      if (ledger) {\r\n        ledger.recordSuccess('serpapi')\r\n        ledger.incrementDailyUsed('serpapi')\r\n      }\r\n\r\n      // Normalize results\r\n      return this.normalizeResults(data.organic_results || [], options)\r\n\r\n    } catch (error) {\r\n      if (ledger) {\r\n        if (error.message.includes('QUOTA')) {\r\n          ledger.markQuotaExceeded('serpapi', this.getNextDailyReset())\r\n        } else {\r\n          ledger.recordError('serpapi', '5xx')\r\n        }\r\n      }\r\n      throw error\r\n    }\r\n  }\r\n\r\n  normalizeResults(results, options) {\r\n    return results.map(item => ({\r\n      title: item.title || 'No title',\r\n      url: item.link || '#',\r\n      snippet: item.snippet || '',\r\n      published_at: item.date || null,\r\n      author: item.displayed_link || null,\r\n      thumbnail: item.thumbnail?.src || null,\r\n      score: 0.8,\r\n      extra: {\r\n        provider: 'serpapi',\r\n        position: item.position,\r\n        displayed_link: item.displayed_link,\r\n        cached_page_link: item.cached_page_link\r\n      }\r\n    }))\r\n  }\r\n\r\n  getNextDailyReset() {\r\n    // Next 00:00 America/New_York\r\n    const now = new Date()\r\n    const nextReset = new Date(now)\r\n    nextReset.setUTCHours(4, 0, 0, 0) // 00:00 EST is 04:00 UTC\r\n    if (nextReset <= now) {\r\n      nextReset.setDate(nextReset.getDate() + 1)\r\n    }\r\n    return nextReset.toISOString()\r\n  }\r\n}\r\n", "export class SerperProvider {\r\n  constructor() {\r\n    this.name = 'Serper'\r\n    this.baseUrl = 'https://google.serper.dev/search'\r\n    this.dailyCap = 83\r\n    this.monthlyCap = 2500\r\n    this.ttl = 24 * 60 * 60 // 24 hours\r\n    this.batchSize = 10\r\n  }\r\n\r\n  async search(query, options, env) {\r\n    const apiKey = env.SERPER_KEY\r\n\r\n    if (!apiKey) {\r\n      console.warn('Serper API key not configured')\r\n      return []\r\n    }\r\n\r\n    const ledger = options.ledger\r\n    if (ledger) {\r\n      const state = ledger.getProviderState('serper')\r\n      if (state.dailyUsed >= this.dailyCap) {\r\n        ledger.markQuotaExceeded('serper', this.getNextDailyReset())\r\n        throw new Error('QUOTA_EXCEEDED_DAILY')\r\n      }\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(this.baseUrl, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-API-KEY': apiKey\r\n        },\r\n        body: JSON.stringify({\r\n          q: query,\r\n          num: Math.min(options.limit || 10, this.batchSize)\r\n        })\r\n      })\r\n\r\n      const data = await response.json()\r\n\r\n      if (!response.ok) {\r\n        if (response.status === 429) {\r\n          if (ledger) ledger.markQuotaExceeded('serper', this.getNextDailyReset())\r\n          throw new Error('QUOTA_EXCEEDED')\r\n        }\r\n        throw new Error(`Serper API error: ${response.status}`)\r\n      }\r\n\r\n      if (ledger) {\r\n        ledger.recordSuccess('serper')\r\n        ledger.incrementDailyUsed('serper')\r\n      }\r\n\r\n      return (data.organic || []).map(item => ({\r\n        title: item.title || 'No title',\r\n        url: item.link || '#',\r\n        snippet: item.snippet || '',\r\n        score: 0.5,\r\n        thumbnail: item.thumbnail || null,\r\n        published_at: item.date || null,\r\n        author: item.displayed_link || null,\r\n        extra: {\r\n          provider: 'serper',\r\n          position: item.position,\r\n          domain: item.displayed_link\r\n        }\r\n      }))\r\n\r\n    } catch (error) {\r\n      if (ledger) {\r\n        if (error.message.includes('QUOTA')) {\r\n          ledger.markQuotaExceeded('serper', this.getNextDailyReset())\r\n        } else {\r\n          ledger.recordError('serper', '5xx')\r\n        }\r\n      }\r\n      throw error\r\n    }\r\n  }\r\n\r\n  getNextDailyReset() {\r\n    const now = new Date()\r\n    const nextReset = new Date(now)\r\n    nextReset.setUTCHours(4, 0, 0, 0)\r\n    if (nextReset <= now) {\r\n      nextReset.setDate(nextReset.getDate() + 1)\r\n    }\r\n    return nextReset.toISOString()\r\n  }\r\n}\r\n", "export class YandexProvider {\r\n  constructor() {\r\n    this.name = 'Yandex'\r\n    this.baseUrl = 'https://api.serpwow.com/search'\r\n    this.dailyCap = 3\r\n    this.monthlyCap = 100\r\n    this.ttl = 4 * 24 * 60 * 60 // 4 days\r\n    this.batchSize = 50\r\n  }\r\n\r\n  async search(query, options, env) {\r\n    const apiKey = env.SERPWOW_API_KEY // Using SERPWOW_API_KEY for SERP Wow\r\n\r\n    if (!apiKey) {\r\n      console.warn('SERP Wow (Yandex) API key not configured')\r\n      return []\r\n    }\r\n\r\n    const ledger = options.ledger\r\n    if (ledger) {\r\n      const state = ledger.getProviderState('yandex')\r\n      if (state.dailyUsed >= this.dailyCap) {\r\n        ledger.markQuotaExceeded('yandex', this.getNextDailyReset())\r\n        throw new Error('QUOTA_EXCEEDED_DAILY')\r\n      }\r\n    }\r\n\r\n    try {\r\n      const params = new URLSearchParams({\r\n        api_key: apiKey,\r\n        q: query,\r\n        engine: 'yandex',\r\n        num: Math.min(options.limit || 10, this.batchSize),\r\n        yandex_domain: options.yandex_domain || 'yandex.com',\r\n        yandex_location: options.yandex_location || '',\r\n        yandex_language: options.yandex_language || 'en'\r\n      })\r\n\r\n      // Add freshness filter\r\n      if (options.fresh && options.fresh !== 'all') {\r\n        const days = options.fresh.replace('d', '')\r\n        params.append('tbs', `qdr:d${days}`)\r\n      }\r\n\r\n      const response = await fetch(`${this.baseUrl}?${params}`)\r\n      const data = await response.json()\r\n\r\n      if (!response.ok) {\r\n        if (response.status === 429) {\r\n          if (ledger) ledger.markQuotaExceeded('yandex', this.getNextDailyReset())\r\n          throw new Error('QUOTA_EXCEEDED')\r\n        }\r\n        throw new Error(`SERP Wow error: ${data.error || response.status}`)\r\n      }\r\n\r\n      if (ledger) {\r\n        ledger.recordSuccess('yandex')\r\n        ledger.incrementDailyUsed('yandex')\r\n      }\r\n\r\n      return this.normalizeResults(data.organic_results || [], options)\r\n\r\n    } catch (error) {\r\n      if (ledger) {\r\n        if (error.message.includes('QUOTA')) {\r\n          ledger.markQuotaExceeded('yandex', this.getNextDailyReset())\r\n        } else {\r\n          ledger.recordError('yandex', '5xx')\r\n        }\r\n      }\r\n      throw error\r\n    }\r\n  }\r\n\r\n  normalizeResults(results, options) {\r\n    return results.map(item => ({\r\n      title: item.title || 'No title',\r\n      url: item.link || '#',\r\n      snippet: item.snippet || '',\r\n      published_at: item.date || null,\r\n      author: item.displayed_link || null,\r\n      thumbnail: item.thumbnail?.src || null,\r\n      score: 0.9,\r\n      extra: {\r\n        provider: 'yandex',\r\n        position: item.position,\r\n        domain: item.domain\r\n      }\r\n    }))\r\n  }\r\n\r\n  getNextDailyReset() {\r\n    const now = new Date()\r\n    const nextReset = new Date(now)\r\n    nextReset.setUTCHours(4, 0, 0, 0)\r\n    if (nextReset <= now) {\r\n      nextReset.setDate(nextReset.getDate() + 1)\r\n    }\r\n    return nextReset.toISOString()\r\n  }\r\n}\r\n", "export class BraveProvider {\r\n  constructor() {\r\n    this.name = 'Brave'\r\n    this.baseUrl = 'https://api.search.brave.com/res/v1/web/search'\r\n    this.dailyCap = 66\r\n    this.monthlyCap = 2000\r\n    this.ttl = 24 * 60 * 60 // 24 hours\r\n    this.batchSize = 20\r\n  }\r\n\r\n  async search(query, options, env) {\r\n    const apiKey = env.BRAVE_API_KEY\r\n\r\n    if (!apiKey) {\r\n      console.warn('Brave API key not configured')\r\n      return []\r\n    }\r\n\r\n    const ledger = options.ledger\r\n    if (ledger) {\r\n      const state = ledger.getProviderState('brave')\r\n      if (state.dailyUsed >= this.dailyCap) {\r\n        ledger.markQuotaExceeded('brave', this.getNextDailyReset())\r\n        throw new Error('QUOTA_EXCEEDED_DAILY')\r\n      }\r\n    }\r\n\r\n    try {\r\n      const params = new URLSearchParams({\r\n        q: query,\r\n        count: Math.min(options.limit || 10, this.batchSize),\r\n        safesearch: options.safeMode ? 'strict' : 'off'\r\n      })\r\n\r\n      // Add freshness filter\r\n      if (options.fresh && options.fresh !== 'all') {\r\n        if (options.fresh === 'd1') params.set('freshness', 'pd')\r\n        else if (options.fresh === 'd7') params.set('freshness', 'pw')\r\n        else if (options.fresh === 'd30') params.set('freshness', 'pm')\r\n        else if (options.fresh === 'd365') params.set('freshness', 'py')\r\n      }\r\n\r\n      const response = await fetch(`${this.baseUrl}?${params}`, {\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'X-Subscription-Token': apiKey\r\n        }\r\n      })\r\n\r\n      const data = await response.json()\r\n\r\n      if (!response.ok) {\r\n        if (response.status === 429) {\r\n          if (ledger) ledger.markQuotaExceeded('brave', this.getNextDailyReset())\r\n          throw new Error('QUOTA_EXCEEDED')\r\n        }\r\n        throw new Error(`Brave API error: ${response.status}`)\r\n      }\r\n\r\n      if (ledger) {\r\n        ledger.recordSuccess('brave')\r\n        ledger.incrementDailyUsed('brave')\r\n      }\r\n\r\n      return (data.web?.results || []).map(result => ({\r\n        title: result.title,\r\n        url: result.url,\r\n        snippet: result.description,\r\n        score: result.score || 1,\r\n        thumbnail: result.thumbnail?.src || null,\r\n        published_at: null,\r\n        author: result.meta_url?.hostname || null,\r\n        extra: {\r\n          provider: 'brave',\r\n          subtype: result.subtype,\r\n          age: result.page_age\r\n        }\r\n      }))\r\n\r\n    } catch (error) {\r\n      if (ledger) {\r\n        if (error.message.includes('QUOTA')) {\r\n          ledger.markQuotaExceeded('brave', this.getNextDailyReset())\r\n        } else {\r\n          ledger.recordError('brave', '5xx')\r\n        }\r\n      }\r\n      throw error\r\n    }\r\n  }\r\n\r\n  getNextDailyReset() {\r\n    const now = new Date()\r\n    const nextReset = new Date(now)\r\n    nextReset.setUTCHours(4, 0, 0, 0)\r\n    if (nextReset <= now) {\r\n      nextReset.setDate(nextReset.getDate() + 1)\r\n    }\r\n    return nextReset.toISOString()\r\n  }\r\n}\r\n", "/**\r\n * SerpHouse Provider\r\n * SERP API via SerpHouse\r\n */\r\n\r\nexport class SerpHouseProvider {\r\n  constructor() {\r\n    this.name = 'SerpHouse'\r\n    this.baseUrl = 'https://api.serphouse.com/serp/live'\r\n    this.version = '1.0.0'\r\n    this.dailyCap = 13\r\n    this.monthlyCap = 400\r\n    this.ttl = 4 * 24 * 60 * 60 // 4 days\r\n    this.batchSize = 75\r\n  }\r\n\r\n  async search(query, options, env) {\r\n    const apiKey = env.SERPHOUSE_KEY\r\n\r\n    if (!apiKey) {\r\n      console.warn('SerpHouse API key not configured')\r\n      return []\r\n    }\r\n\r\n    const ledger = options.ledger\r\n    if (ledger) {\r\n      const state = ledger.getProviderState('serphouse')\r\n      if (state.dailyUsed >= this.dailyCap) {\r\n        ledger.markQuotaExceeded('serphouse', this.getNextDailyReset())\r\n        throw new Error('QUOTA_EXCEEDED_DAILY')\r\n      }\r\n    }\r\n\r\n    // Retry logic for network errors only\r\n    let lastError = null\r\n    for (let attempt = 0; attempt < 2; attempt++) {\r\n      try {\r\n        const params = new URLSearchParams({\r\n          api_token: apiKey,\r\n          q: query,\r\n          num_results: Math.min(options.limit || 10, this.batchSize),\r\n          domain: 'google.com',\r\n          lang: 'en',\r\n          device: 'desktop',\r\n          serp_type: 'web'\r\n        })\r\n\r\n        if (options.fresh && options.fresh !== 'all') {\r\n          const days = options.fresh.replace('d', '')\r\n          params.append('time_period', `past_${days}_days`)\r\n        }\r\n\r\n        const response = await fetch(`${this.baseUrl}?${params}`, {\r\n          method: 'GET',\r\n          headers: {\r\n            'User-Agent': 'Jack-Portal/2.0.0'\r\n          },\r\n          cf: { timeout: 15000 }\r\n        })\r\n\r\n        if (!response.ok) {\r\n          if (response.status === 429) {\r\n            if (ledger) ledger.markQuotaExceeded('serphouse', this.getNextDailyReset())\r\n            throw new Error('RATE_LIMIT')\r\n          }\r\n          if (response.status === 400 || response.status === 422) {\r\n            throw new Error('BAD_PARAMS')\r\n          }\r\n          if (response.status === 404) {\r\n            throw new Error('BAD_HOST')\r\n          }\r\n          if (response.status >= 500) {\r\n            throw new Error('UPSTREAM_ERROR')\r\n          }\r\n          throw new Error(`SerpHouse error: ${response.status} - URL: ${this.baseUrl}?${params.toString().replace(apiKey, '[REDACTED]')}`)\r\n        }\r\n\r\n        const data = await response.json()\r\n\r\n        if (ledger) {\r\n          ledger.recordSuccess('serphouse')\r\n          ledger.incrementDailyUsed('serphouse')\r\n        }\r\n\r\n        return this.normalizeResults(data.results || data || [], options)\r\n\r\n      } catch (error) {\r\n        lastError = error\r\n        \r\n        // Only retry on network errors, not HTTP errors\r\n        const isNetworkError = error.name === 'TypeError' || \r\n                              error.message.includes('fetch') || \r\n                              error.message.includes('network') ||\r\n                              error.message.includes('ECONNRESET') ||\r\n                              error.message.includes('ENOTFOUND')\r\n        \r\n        if (!isNetworkError || attempt === 1) {\r\n          // Not a network error or this was the second attempt\r\n          break\r\n        }\r\n        \r\n        // Wait a bit before retry\r\n        await new Promise(resolve => setTimeout(resolve, 1000))\r\n      }\r\n    }\r\n\r\n    // Handle final error\r\n    if (ledger) {\r\n      if (lastError.message.includes('QUOTA') || lastError.message.includes('RATE_LIMIT')) {\r\n        ledger.markQuotaExceeded('serphouse', this.getNextDailyReset())\r\n      } else if (lastError.message.includes('UPSTREAM_ERROR') || lastError.message.includes('5xx')) {\r\n        ledger.recordError('serphouse', '5xx')\r\n      } else {\r\n        ledger.recordError('serphouse', '5xx')\r\n      }\r\n    }\r\n    throw lastError\r\n  }\r\n\r\n  normalizeResults(results, options) {\r\n    if (!Array.isArray(results)) {\r\n      console.warn('SerpHouse results is not an array:', results)\r\n      return []\r\n    }\r\n    return results.map(item => ({\r\n      title: item.title || 'No title',\r\n      url: item.url || '#',\r\n      snippet: item.description || '',\r\n      published_at: item.date || null,\r\n      author: item.domain || null,\r\n      thumbnail: null,\r\n      score: 0.7,\r\n      extra: {\r\n        provider: 'serphouse',\r\n        position: item.position,\r\n        domain: item.domain\r\n      }\r\n    }))\r\n  }\r\n\r\n  getNextDailyReset() {\r\n    const now = new Date()\r\n    const nextReset = new Date(now)\r\n    nextReset.setUTCHours(4, 0, 0, 0)\r\n    if (nextReset <= now) {\r\n      nextReset.setDate(nextReset.getDate() + 1)\r\n    }\r\n    return nextReset.toISOString()\r\n  }\r\n}\r\n", "// src/lib/sources/adultmedia.js\r\n\r\nexport class AdultMediaProvider {\r\n  constructor() {\r\n    this.name = 'AdultMedia'\r\n    // Switched to the confirmed working endpoint\r\n    this.baseUrl = 'https://porn-api-adultdatalink.p.rapidapi.com/pornpics/search'\r\n    this.version = '1.0.0'\r\n    this.dailyCap = 166\r\n    this.monthlyCap = 5000\r\n    this.ttl = 3 * 24 * 60 * 60 // 3 days\r\n    this.batchSize = 20\r\n  }\r\n\r\n  async search(query, options, env) {\r\n    const apiKey = env.ADULTMEDIA_API_KEY\r\n\r\n    if (!apiKey) {\r\n      console.warn('AdultMedia API key not configured')\r\n      return []\r\n    }\r\n\r\n    const ledger = options.ledger\r\n    if (ledger) {\r\n      const state = ledger.getProviderState('adultmedia')\r\n      if (state.dailyUsed >= this.dailyCap) {\r\n        ledger.markQuotaExceeded('adultmedia')\r\n        throw new Error('QUOTA_EXCEEDED_DAILY')\r\n      }\r\n    }\r\n\r\n    try {\r\n      const params = new URLSearchParams({\r\n        query: query,\r\n        // The 'count' parameter is correct for this API\r\n        count: Math.min(options.limit || 10, this.batchSize)\r\n      })\r\n\r\n      const response = await fetch(`${this.baseUrl}?${params}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'X-RapidAPI-Key': apiKey,\r\n          // Host header now matches the working endpoint\r\n          'X-RapidAPI-Host': 'porn-api-adultdatalink.p.rapidapi.com'\r\n        },\r\n        cf: {\r\n          cacheTtl: this.ttl,\r\n          cacheEverything: true\r\n        }\r\n      })\r\n\r\n      if (!response.ok) {\r\n        if (response.status === 429) {\r\n          if (ledger) ledger.markQuotaExceeded('adultmedia')\r\n          throw new Error('QUOTA_EXCEEDED')\r\n        }\r\n        throw new Error(`AdultMedia error: ${response.status}`)\r\n      }\r\n\r\n      const data = await response.json()\r\n\r\n      if (ledger) {\r\n        ledger.recordSuccess('adultmedia')\r\n        ledger.incrementDailyUsed('adultmedia')\r\n      }\r\n\r\n      // Use the new, specific normalizer for this API's data\r\n      return this.normalizeResults(data.images || [], options)\r\n\r\n    } catch (error) {\r\n      if (ledger) {\r\n        if (error.message.includes('QUOTA')) {\r\n          ledger.markQuotaExceeded('adultmedia')\r\n        } else {\r\n          ledger.recordError('adultmedia', '5xx')\r\n        }\r\n      }\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Rewritten to handle the data structure from the porn-api-adultdatalink endpoint.\r\n   */\r\n  normalizeResults(results, options) {\r\n    return results.map(item => ({\r\n      title: item.title || 'No title',\r\n      url: item.image_url || item.url || '#',\r\n      snippet: item.source || '',\r\n      published_at: null, // This data is not available from this API\r\n      author: item.source || null,\r\n      thumbnail: item.thumb_url || item.image_url || null,\r\n      score: 0.5,\r\n      extra: {\r\n        provider: 'adultmedia',\r\n        image_id: item.id,\r\n        source: item.source\r\n      }\r\n    }))\r\n  }\r\n}\r\n", "export class QualityPornProvider {\r\n  constructor() {\r\n    this.name = 'QualityPorn'\r\n    this.baseUrl = 'https://quality-porn.p.rapidapi.com/docs'\r\n    this.version = '1.0.0'\r\n    this.dailyCap = 300\r\n    this.monthlyCap = 9000\r\n    this.ttl = 24 * 60 * 60 // 24 hours\r\n    this.batchSize = 20\r\n  }\r\n\r\n  async search(query, options, env) {\r\n    const apiKey = env.RAPIDAPI_KEY\r\n\r\n    if (!apiKey) {\r\n      console.warn('RapidAPI key not configured')\r\n      return []\r\n    }\r\n\r\n    const ledger = options.ledger\r\n    if (ledger) {\r\n      const state = ledger.getProviderState('qualityporn')\r\n      if (state.dailyUsed >= this.dailyCap) {\r\n        ledger.markQuotaExceeded('qualityporn', this.getNextDailyReset())\r\n        throw new Error('QUOTA_EXCEEDED_DAILY')\r\n      }\r\n    }\r\n\r\n    try {\r\n      const params = new URLSearchParams({\r\n        q: query,\r\n        limit: Math.min(options.limit || 10, this.batchSize)\r\n      })\r\n\r\n      if (options.fresh && options.fresh !== 'all') {\r\n        const days = options.fresh.replace('d', '')\r\n        params.append('freshness', `d${days}`)\r\n      }\r\n\r\n      const response = await fetch(`${this.baseUrl}?${params}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'x-rapidapi-host': 'quality-porn.p.rapidapi.com',\r\n          'x-rapidapi-key': apiKey,\r\n          'User-Agent': 'Jack-Portal/2.0.0'\r\n        },\r\n        cf: { timeout: 10000 }\r\n      })\r\n\r\n      if (!response.ok) {\r\n        if (response.status === 429) {\r\n          if (ledger) ledger.markQuotaExceeded('qualityporn', this.getNextDailyReset())\r\n          throw new Error('QUOTA_EXCEEDED')\r\n        }\r\n        throw new Error(`QualityPorn error: ${response.status}`)\r\n      }\r\n\r\n      const data = await response.json()\r\n\r\n      if (ledger) {\r\n        ledger.recordSuccess('qualityporn')\r\n        ledger.incrementDailyUsed('qualityporn')\r\n      }\r\n\r\n      return this.normalizeResults(data.results || [], options)\r\n\r\n    } catch (error) {\r\n      if (ledger) {\r\n        if (error.message.includes('QUOTA')) {\r\n          ledger.markQuotaExceeded('qualityporn', this.getNextDailyReset())\r\n        } else {\r\n          ledger.recordError('qualityporn', '5xx')\r\n        }\r\n      }\r\n      throw error\r\n    }\r\n  }\r\n\r\n  normalizeResults(results, options) {\r\n    return results.map(item => ({\r\n      title: item.title || 'No title',\r\n      url: item.url || '#',\r\n      snippet: item.description || '',\r\n      published_at: item.published_at || null,\r\n      author: item.author || null,\r\n      thumbnail: item.thumbnail || null,\r\n      score: 0.6,\r\n      extra: {\r\n        provider: 'qualityporn',\r\n        category: item.category,\r\n        tags: item.tags || []\r\n      }\r\n    }))\r\n  }\r\n\r\n  getNextDailyReset() {\r\n    const now = new Date()\r\n    const nextReset = new Date(now)\r\n    nextReset.setUTCHours(4, 0, 0, 0)\r\n    if (nextReset <= now) {\r\n      nextReset.setDate(nextReset.getDate() + 1)\r\n    }\r\n    return nextReset.toISOString()\r\n  }\r\n}\r\n", "export class ApifyProvider {\r\n  constructor() {\r\n    this.name = 'Apify'\r\n    this.baseUrl = 'https://api.apify.com/v2'\r\n    this.version = '1.0.0'\r\n    this.monthlyCap = 1428\r\n    this.ttl = 24 * 60 * 60 // 24 hours\r\n    this.batchSize = 50\r\n  }\r\n\r\n  async search(query, options, env) {\r\n    const apiKey = env.APIFY_TOKEN\r\n\r\n    if (!apiKey) {\r\n      console.warn('Apify API token not configured')\r\n      return []\r\n    }\r\n\r\n    const ledger = options.ledger\r\n    if (ledger) {\r\n      const state = ledger.getProviderState('apify')\r\n      if (state.monthlyUsed >= this.monthlyCap) {\r\n        ledger.markQuotaExceeded('apify', this.getNextMonthlyReset())\r\n        throw new Error('QUOTA_EXCEEDED_MONTHLY')\r\n      }\r\n    }\r\n\r\n    try {\r\n      const runParams = {\r\n        queries: query,\r\n        maxPagesPerQuery: 1,\r\n        resultsPerPage: Math.min(options.limit || 10, this.batchSize),\r\n        languageCode: 'en',\r\n        regionCode: 'us',\r\n        mobileResults: false\r\n      }\r\n\r\n      if (options.fresh && options.fresh !== 'all') {\r\n        const days = options.fresh.replace('d', '')\r\n        runParams.dateRange = `d${days}`\r\n      }\r\n\r\n      // Use synchronous endpoint to avoid 400 errors\r\n      const response = await fetch(`${this.baseUrl}/acts/apify~google-search-scraper/run-sync-get-dataset-items?token=${apiKey}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'User-Agent': 'Jack-Portal/2.0.0'\r\n        },\r\n        body: JSON.stringify(runParams),\r\n        cf: { timeout: 30000 }\r\n      })\r\n\r\n      if (!response.ok) {\r\n        if (response.status === 429) {\r\n          if (ledger) ledger.markQuotaExceeded('apify', this.getNextMonthlyReset())\r\n          throw new Error('RATE_LIMIT')\r\n        }\r\n        if (response.status === 400 || response.status === 422) {\r\n          throw new Error('BAD_PARAMS')\r\n        }\r\n        if (response.status === 404) {\r\n          throw new Error('BAD_HOST')\r\n        }\r\n        if (response.status >= 500) {\r\n          throw new Error('UPSTREAM_ERROR')\r\n        }\r\n        throw new Error(`Apify error: ${response.status} - Query: ${query}`)\r\n      }\r\n\r\n      const results = await response.json()\r\n\r\n      if (ledger) {\r\n        ledger.recordSuccess('apify')\r\n        ledger.incrementMonthlyUsed('apify')\r\n      }\r\n\r\n      return this.normalizeResults(results, options)\r\n\r\n    } catch (error) {\r\n      if (ledger) {\r\n        if (error.message.includes('QUOTA') || error.message.includes('RATE_LIMIT')) {\r\n          ledger.markQuotaExceeded('apify', this.getNextMonthlyReset())\r\n        } else if (error.message.includes('UPSTREAM_ERROR') || error.message.includes('5xx')) {\r\n          ledger.recordError('apify', '5xx')\r\n        } else {\r\n          ledger.recordError('apify', '5xx')\r\n        }\r\n      }\r\n      throw error\r\n    }\r\n  }\r\n\r\n  normalizeResults(results, options) {\r\n    return results.map(item => ({\r\n      title: item.title || 'No title',\r\n      url: item.url || '#',\r\n      snippet: item.snippet || item.description || '',\r\n      published_at: item.date || null,\r\n      author: item.displayedLink || null,\r\n      thumbnail: item.thumbnail || null,\r\n      score: 0.5,\r\n      extra: {\r\n        provider: 'apify',\r\n        position: item.position,\r\n        domain: item.domain\r\n      }\r\n    }))\r\n  }\r\n}\r\n", "/**\r\n * Robots.txt Compliance Checker\r\n * Fetches, parses, and caches robots.txt for domains\r\n */\r\n\r\nexport class RobotsChecker {\r\n  constructor(env) {\r\n    this.env = env\r\n    this.cache = env.CACHE\r\n    this.cacheTtl = 6 * 60 * 60 // 6 hours cache for robots.txt\r\n  }\r\n\r\n  /**\r\n   * Check if crawling is allowed for a URL\r\n   * @param {string} url - The URL to check\r\n   * @param {string} userAgent - User agent string (defaults to Jack-Portal)\r\n   * @returns {Promise<Object>} - {allowed: boolean, status: string, cached: boolean}\r\n   */\r\n  async isAllowed(url, userAgent = 'Jack-Portal/2.0.0') {\r\n    try {\r\n      const domain = this._extractDomain(url)\r\n      if (!domain) {\r\n        return { allowed: true, status: 'no_domain', cached: false }\r\n      }\r\n\r\n      // Check override map first\r\n      const overrideResult = this._checkOverrideMap(domain)\r\n      if (overrideResult) {\r\n        return { ...overrideResult, cached: false }\r\n      }\r\n\r\n      // Check cache\r\n      const cacheKey = `robots:${domain}`\r\n      const cached = await this._getCachedRobots(cacheKey)\r\n      if (cached) {\r\n        const allowed = this._checkRobotsRules(cached.rules, url, userAgent)\r\n        return { allowed, status: 'cached', cached: true }\r\n      }\r\n\r\n      // Fetch and parse robots.txt\r\n      const robotsUrl = `https://${domain}/robots.txt`\r\n      const response = await fetch(robotsUrl, {\r\n        headers: { 'User-Agent': userAgent },\r\n        cf: { timeout: 5000 } // 5 second timeout\r\n      })\r\n\r\n      if (!response.ok) {\r\n        // If robots.txt doesn't exist or is unreachable, default to allowed\r\n        return { allowed: true, status: 'unavailable', cached: false }\r\n      }\r\n\r\n      const robotsText = await response.text()\r\n      const rules = this._parseRobotsTxt(robotsText)\r\n\r\n      // Cache the parsed rules\r\n      await this._cacheRobotsRules(cacheKey, rules)\r\n\r\n      const allowed = this._checkRobotsRules(rules, url, userAgent)\r\n      return { allowed, status: 'fetched', cached: false }\r\n\r\n    } catch (error) {\r\n      console.warn('Robots check error:', error.message)\r\n      return { allowed: true, status: 'error', cached: false }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extract domain from URL\r\n   */\r\n  _extractDomain(url) {\r\n    try {\r\n      const urlObj = new URL(url)\r\n      return urlObj.hostname\r\n    } catch {\r\n      return null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check domain override map\r\n   */\r\n  _checkOverrideMap(domain) {\r\n    const override = ROBOTS_OVERRIDE_MAP[domain]\r\n    if (!override) return null\r\n\r\n    switch (override) {\r\n      case 'force_allow':\r\n        return { allowed: true, status: 'override_allow' }\r\n      case 'force_block':\r\n        return { allowed: false, status: 'override_block' }\r\n      default:\r\n        return null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get cached robots rules\r\n   */\r\n  async _getCachedRobots(cacheKey) {\r\n    if (!this.cache) return null\r\n\r\n    try {\r\n      const cached = await this.cache.get(cacheKey)\r\n      return cached ? JSON.parse(cached) : null\r\n    } catch {\r\n      return null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cache robots rules\r\n   */\r\n  async _cacheRobotsRules(cacheKey, rules) {\r\n    if (!this.cache) return\r\n\r\n    try {\r\n      await this.cache.put(cacheKey, JSON.stringify(rules), {\r\n        expirationTtl: this.cacheTtl\r\n      })\r\n    } catch (error) {\r\n      console.warn('Failed to cache robots rules:', error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parse robots.txt content\r\n   */\r\n  _parseRobotsTxt(text) {\r\n    const lines = text.split('\\n').map(line => line.trim())\r\n    const rules = { '*': [], 'Jack-Portal/2.0.0': [] }\r\n    let currentUserAgent = null\r\n\r\n    for (const line of lines) {\r\n      if (line.startsWith('#') || line === '') continue\r\n\r\n      const colonIndex = line.indexOf(':')\r\n      if (colonIndex === -1) continue\r\n\r\n      const directive = line.substring(0, colonIndex).trim().toLowerCase()\r\n      const value = line.substring(colonIndex + 1).trim()\r\n\r\n      if (directive === 'user-agent') {\r\n        currentUserAgent = value\r\n        if (!rules[currentUserAgent]) {\r\n          rules[currentUserAgent] = []\r\n        }\r\n      } else if (directive === 'disallow' && currentUserAgent) {\r\n        rules[currentUserAgent].push({\r\n          type: 'disallow',\r\n          path: value\r\n        })\r\n      } else if (directive === 'allow' && currentUserAgent) {\r\n        rules[currentUserAgent].push({\r\n          type: 'allow',\r\n          path: value\r\n        })\r\n      }\r\n    }\r\n\r\n    return rules\r\n  }\r\n\r\n  /**\r\n   * Check if URL is allowed by robots rules\r\n   */\r\n  _checkRobotsRules(rules, url, userAgent) {\r\n    // Try specific user agent first, then fall back to *\r\n    const userAgentRules = rules[userAgent] || rules['*'] || []\r\n\r\n    // Extract path from URL\r\n    const urlObj = new URL(url)\r\n    const path = urlObj.pathname + urlObj.search\r\n\r\n    // Check rules in order (more specific first)\r\n    for (const rule of userAgentRules) {\r\n      if (this._pathMatches(path, rule.path)) {\r\n        return rule.type === 'allow'\r\n      }\r\n    }\r\n\r\n    // Default to allowed if no matching rules\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * Check if path matches robots rule pattern\r\n   */\r\n  _pathMatches(path, rulePath) {\r\n    if (rulePath === '') return true // Empty path matches everything\r\n    if (rulePath === '/') return path.startsWith('/') // Root matches all paths\r\n\r\n    // Simple wildcard matching\r\n    const pattern = rulePath.replace(/\\*/g, '.*')\r\n    const regex = new RegExp(`^${pattern}`)\r\n    return regex.test(path)\r\n  }\r\n}\r\n\r\n// Domain override map - TODO: populate with specific domains\r\nconst ROBOTS_OVERRIDE_MAP = {\r\n  // 'example.com': 'force_allow',  // Uncomment and replace with actual domains\r\n  // 'problematic-site.com': 'force_block',\r\n}\r\n", "/**\r\n * Scrapers Provider\r\n * Handles web scraping with quality metrics and robots compliance\r\n */\r\n\r\nimport { RobotsChecker } from '../robots-checker.js'\r\n\r\nexport class ScrapersProvider {\r\n  constructor() {\r\n    this.name = 'Scrapers'\r\n    this.baseUrl = 'https://scrapers-api.example.com'\r\n    this.version = '1.1.0'\r\n    this.robotsChecker = null\r\n  }\r\n\r\n  async search(query, options, env) {\r\n    const apiKey = env.SCRAPERS_API_KEY\r\n\r\n    if (!apiKey || apiKey === 'your_scrapers_api_key_here' || apiKey.includes('your_')) {\r\n      console.warn('Scrapers API key not configured or using placeholder')\r\n      return []\r\n    }\r\n\r\n    try {\r\n      const requestBody = {\r\n        query: query,\r\n        limit: Math.min(options.limit || 10, 15),\r\n        safemode: options.safeMode,\r\n        fresh: options.fresh,\r\n        duration: options.duration,\r\n        site: options.site,\r\n        // Add freshness and duration parameters for server-side filtering\r\n        freshness_filter: this.buildFreshnessFilter(options.fresh),\r\n        duration_filter: options.duration\r\n      }\r\n\r\n      const response = await fetch(`${this.baseUrl}/search`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${apiKey}`,\r\n          'User-Agent': 'Jack-Portal/2.0.0'\r\n        },\r\n        body: JSON.stringify(requestBody)\r\n      })\r\n\r\n      const data = await response.json()\r\n\r\n      if (!response.ok) {\r\n        if (response.status === 429) {\r\n          throw new Error('QUOTA_EXCEEDED')\r\n        }\r\n        throw new Error(`Scrapers API error: ${response.status}`)\r\n      }\r\n\r\n      // Process and enhance results with quality scoring\r\n      const processedResults = (data.results || []).map(item => {\r\n        const enhanced = this.enhanceWithQualityMetrics(item, options)\r\n        return {\r\n          title: enhanced.title || 'No title',\r\n          url: enhanced.url || '#',\r\n          snippet: enhanced.snippet || enhanced.description || '',\r\n          score: enhanced.score || 0.5,\r\n          thumbnail: enhanced.thumbnail || null,\r\n          published_at: enhanced.published_at || null,\r\n          author: enhanced.author || enhanced.source || null,\r\n          extra: {\r\n            scraped_at: enhanced.scraped_at,\r\n            content_type: enhanced.content_type || 'article',\r\n            word_count: enhanced.word_count || 0,\r\n            readability_score: enhanced.readability_score || 0,\r\n            quality_score: enhanced.quality_score || 0.5,\r\n            source_freshness: enhanced.source_freshness || 'unknown',\r\n            robots_allowed: enhanced.robots_allowed !== false,\r\n            last_modified: enhanced.last_modified || null,\r\n            adapter_version: this.version,\r\n            tags: enhanced.tags || []\r\n          }\r\n        }\r\n      })\r\n\r\n      return processedResults\r\n\r\n    } catch (error) {\r\n      if (error.message === 'QUOTA_EXCEEDED') {\r\n        throw error\r\n      }\r\n      console.warn('Scrapers search error:', error.message)\r\n      return []\r\n    }\r\n  }\r\n\r\n  buildFreshnessFilter(fresh) {\r\n    if (!fresh || fresh === 'all') return null\r\n\r\n    const now = new Date()\r\n    let cutoffDate\r\n\r\n    switch (fresh) {\r\n      case 'd1':\r\n        cutoffDate = new Date(now.getTime() - 24 * 60 * 60 * 1000)\r\n        break\r\n      case 'd7':\r\n        cutoffDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000)\r\n        break\r\n      case 'd30':\r\n        cutoffDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000)\r\n        break\r\n      case 'd365':\r\n        cutoffDate = new Date(now.getTime() - 365 * 24 * 60 * 60 * 1000)\r\n        break\r\n      default:\r\n        return null\r\n    }\r\n\r\n    return cutoffDate.toISOString()\r\n  }\r\n\r\n  enhanceWithQualityMetrics(item, options) {\r\n    const enhanced = { ...item }\r\n\r\n    // Calculate word count\r\n    const text = item.snippet || item.description || ''\r\n    if (text) {\r\n      enhanced.word_count = text.split(/\\s+/).length\r\n    }\r\n\r\n    // Basic readability score (simplified)\r\n    enhanced.readability_score = this.calculateReadabilityScore(text)\r\n\r\n    // Quality score based on multiple factors\r\n    enhanced.quality_score = this.calculateQualityScore(enhanced)\r\n\r\n    // Source freshness based on published date\r\n    enhanced.source_freshness = this.assessFreshness(item.published_at, options.fresh)\r\n\r\n    // Robots.txt compliance check\r\n    enhanced.robots_status = 'checking'\r\n    enhanced.robots_allowed = true // Default to allowed\r\n\r\n    // Content type detection\r\n    enhanced.content_type = this.detectContentType(item)\r\n\r\n    return enhanced\r\n  }\r\n\r\n  calculateReadabilityScore(text) {\r\n    if (!text || text.length === 0) return 0\r\n\r\n    const words = text.split(/\\s+/).length\r\n    const sentences = text.split(/[.!?]+/).length\r\n    const syllables = this.countSyllables(text)\r\n\r\n    if (sentences === 0) return 0\r\n\r\n    // Simplified Flesch Reading Ease\r\n    const avgWordsPerSentence = words / sentences\r\n    const avgSyllablesPerWord = syllables / words\r\n\r\n    const score = 206.835 - (1.015 * avgWordsPerSentence) - (84.6 * avgSyllablesPerWord)\r\n    return Math.max(0, Math.min(100, score))\r\n  }\r\n\r\n  countSyllables(text) {\r\n    const words = text.toLowerCase().split(/\\s+/)\r\n    let syllables = 0\r\n\r\n    for (const word of words) {\r\n      syllables += this.countWordSyllables(word)\r\n    }\r\n\r\n    return syllables\r\n  }\r\n\r\n  countWordSyllables(word) {\r\n    if (word.length <= 3) return 1\r\n\r\n    word = word.replace(/(?:[^laeiouy]es|ed|[^laeiouy]e)$/, '')\r\n    word = word.replace(/^y/, '')\r\n\r\n    const matches = word.match(/[aeiouy]{1,2}/g)\r\n    return matches ? matches.length : 1\r\n  }\r\n\r\n  calculateQualityScore(item) {\r\n    let score = 0.5\r\n\r\n    // Title quality\r\n    if (item.title && item.title.length > 10 && item.title.length < 100) {\r\n      score += 0.1\r\n    }\r\n\r\n    // Content length (prefer substantial content)\r\n    if (item.word_count && item.word_count > 50) {\r\n      score += 0.1\r\n    }\r\n\r\n    // Readability (prefer readable content)\r\n    if (item.readability_score && item.readability_score > 30 && item.readability_score < 80) {\r\n      score += 0.1\r\n    }\r\n\r\n    // Author presence\r\n    if (item.author || item.source) {\r\n      score += 0.05\r\n    }\r\n\r\n    // Published date presence\r\n    if (item.published_at) {\r\n      score += 0.05\r\n    }\r\n\r\n    // Fresh content bonus\r\n    if (item.source_freshness === 'fresh') {\r\n      score += 0.1\r\n    }\r\n\r\n    return Math.max(0, Math.min(1, score))\r\n  }\r\n\r\n  assessFreshness(publishedAt, freshFilter) {\r\n    if (!publishedAt || !freshFilter || freshFilter === 'all') {\r\n      return 'unknown'\r\n    }\r\n\r\n    try {\r\n      const published = new Date(publishedAt)\r\n      const now = new Date()\r\n      const ageMs = now.getTime() - published.getTime()\r\n\r\n      switch (freshFilter) {\r\n        case 'd1':\r\n          return ageMs <= 24 * 60 * 60 * 1000 ? 'fresh' : 'stale'\r\n        case 'd7':\r\n          return ageMs <= 7 * 24 * 60 * 60 * 1000 ? 'fresh' : 'stale'\r\n        case 'd30':\r\n          return ageMs <= 30 * 24 * 60 * 60 * 1000 ? 'fresh' : 'stale'\r\n        case 'd365':\r\n          return ageMs <= 365 * 24 * 60 * 60 * 1000 ? 'fresh' : 'stale'\r\n        default:\r\n          return 'unknown'\r\n      }\r\n    } catch (error) {\r\n      return 'unknown'\r\n    }\r\n  }\r\n\r\n  detectContentType(item) {\r\n    const title = (item.title || '').toLowerCase()\r\n    const snippet = (item.snippet || item.description || '').toLowerCase()\r\n    const url = (item.url || '').toLowerCase()\r\n\r\n    if (url.includes('/blog/') || title.includes('blog') || snippet.includes('posted')) {\r\n      return 'blog'\r\n    }\r\n    if (url.includes('/news/') || title.includes('news') || snippet.includes('breaking')) {\r\n      return 'news'\r\n    }\r\n    if (url.includes('/forum/') || url.includes('/thread/') || snippet.includes('reply')) {\r\n      return 'forum'\r\n    }\r\n    if (url.includes('/docs/') || url.includes('/documentation/') || snippet.includes('api')) {\r\n      return 'documentation'\r\n    }\r\n\r\n    return 'article'\r\n  }\r\n\r\n  async checkRobotsCompliance(url, env) {\r\n    if (!this.robotsChecker) {\r\n      this.robotsChecker = new RobotsChecker(env)\r\n    }\r\n\r\n    try {\r\n      const result = await this.robotsChecker.isAllowed(url)\r\n      return {\r\n        allowed: result.allowed,\r\n        status: result.status,\r\n        cached: result.cached\r\n      }\r\n    } catch (error) {\r\n      console.warn('Robots compliance check failed:', error.message)\r\n      return {\r\n        allowed: true, // Default to allowed on error\r\n        status: 'error',\r\n        cached: false\r\n      }\r\n    }\r\n  }\r\n}\r\n", "/**\r\n * Adapters Provider\r\n * Handles social media and forum content with quality metrics and robots compliance\r\n */\r\n\r\nimport { RobotsChecker } from '../robots-checker.js'\r\n\r\nexport class AdaptersProvider {\r\n  constructor() {\r\n    this.name = 'Adapters'\r\n    this.baseUrl = 'https://adapters-api.example.com'\r\n    this.version = '1.1.0'\r\n    this.robotsChecker = null\r\n  }\r\n\r\n  async search(query, options, env) {\r\n    const apiKey = env.ADAPTERS_API_KEY\r\n\r\n    if (!apiKey || apiKey === 'your_adapters_api_key_here' || apiKey.includes('your_')) {\r\n      console.warn('Adapters API key not configured or using placeholder')\r\n      return []\r\n    }\r\n\r\n    try {\r\n      const requestBody = {\r\n        query: query,\r\n        limit: Math.min(options.limit || 10, 15),\r\n        safemode: options.safeMode,\r\n        fresh: options.fresh,\r\n        duration: options.duration,\r\n        site: options.site,\r\n        // Enhanced parameters for better adapter matching\r\n        freshness_filter: this.buildFreshnessFilter(options.fresh),\r\n        duration_filter: options.duration,\r\n        content_types: ['article', 'blog', 'news', 'documentation']\r\n      }\r\n\r\n      const response = await fetch(`${this.baseUrl}/search`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${apiKey}`,\r\n          'User-Agent': 'Jack-Portal/2.0.0'\r\n        },\r\n        body: JSON.stringify(requestBody),\r\n        cf: { timeout: 10000 } // 10 second timeout\r\n      })\r\n\r\n      const data = await response.json()\r\n\r\n      if (!response.ok) {\r\n        if (response.status === 429) {\r\n          throw new Error('QUOTA_EXCEEDED')\r\n        }\r\n        throw new Error(`Adapters API error: ${response.status}`)\r\n      }\r\n\r\n      // Process and normalize results from various adapters\r\n      const processedResults = (data.results || []).map(item => {\r\n        const normalized = this.normalizeAdapterResult(item, options)\r\n        return {\r\n          title: normalized.title || 'No title',\r\n          url: normalized.url || '#',\r\n          snippet: normalized.snippet || '',\r\n          score: normalized.score || 0.5,\r\n          thumbnail: normalized.thumbnail || null,\r\n          published_at: normalized.published_at || null,\r\n          author: normalized.author || null,\r\n          extra: {\r\n            adapter_type: normalized.adapter_type || 'generic',\r\n            confidence: normalized.confidence || 0.5,\r\n            content_type: normalized.content_type || 'article',\r\n            language: normalized.language || 'en',\r\n            tags: normalized.tags || [],\r\n            word_count: normalized.word_count || 0,\r\n            readability_score: normalized.readability_score || 0,\r\n            quality_score: normalized.quality_score || 0.5,\r\n            source_freshness: normalized.source_freshness || 'unknown',\r\n            robots_allowed: normalized.robots_allowed !== false,\r\n            last_modified: normalized.last_modified || null,\r\n            adapter_version: this.version\r\n          }\r\n        }\r\n      })\r\n\r\n      return processedResults\r\n\r\n    } catch (error) {\r\n      if (error.message === 'QUOTA_EXCEEDED') {\r\n        throw error\r\n      }\r\n      console.warn('Adapters search error:', error.message)\r\n      return []\r\n    }\r\n  }\r\n\r\n  buildFreshnessFilter(fresh) {\r\n    if (!fresh || fresh === 'all') return null\r\n\r\n    const now = new Date()\r\n    let cutoffDate\r\n\r\n    switch (fresh) {\r\n      case 'd1':\r\n        cutoffDate = new Date(now.getTime() - 24 * 60 * 60 * 1000)\r\n        break\r\n      case 'd7':\r\n        cutoffDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000)\r\n        break\r\n      case 'd30':\r\n        cutoffDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000)\r\n        break\r\n      case 'd365':\r\n        cutoffDate = new Date(now.getTime() - 365 * 24 * 60 * 60 * 1000)\r\n        break\r\n      default:\r\n        return null\r\n    }\r\n\r\n    return cutoffDate.toISOString()\r\n  }\r\n\r\n  normalizeAdapterResult(item, options) {\r\n    const normalized = { ...item }\r\n\r\n    // Detect adapter type from result structure\r\n    normalized.adapter_type = this.detectAdapterType(item)\r\n\r\n    // Normalize confidence score\r\n    normalized.confidence = typeof item.confidence === 'number' ?\r\n      Math.max(0, Math.min(1, item.confidence)) : 0.5\r\n\r\n    // Calculate word count\r\n    const text = item.snippet || item.description || ''\r\n    if (text) {\r\n      normalized.word_count = text.split(/\\s+/).length\r\n    }\r\n\r\n    // Basic readability score\r\n    normalized.readability_score = this.calculateReadabilityScore(text)\r\n\r\n    // Quality score based on adapter-specific factors\r\n    normalized.quality_score = this.calculateAdapterQualityScore(normalized)\r\n\r\n    // Source freshness assessment\r\n    normalized.source_freshness = this.assessFreshness(item.published_at, options.fresh)\r\n\r\n    // Language detection (simplified)\r\n    normalized.language = this.detectLanguage(item)\r\n\r\n    // Tag extraction and normalization\r\n    normalized.tags = this.extractAndNormalizeTags(item)\r\n\r\n    // Content type detection\r\n    normalized.content_type = this.detectContentType(item)\r\n\r\n    // Robots.txt compliance\r\n    normalized.robots_status = 'checking'\r\n    normalized.robots_allowed = true // Default to allowed\r\n\r\n    return normalized\r\n  }\r\n\r\n  detectAdapterType(item) {\r\n    // Detect adapter type based on result structure and metadata\r\n    if (item.source === 'twitter' || item.source === 'x') {\r\n      return 'social'\r\n    }\r\n    if (item.source === 'reddit') {\r\n      return 'forum'\r\n    }\r\n    if (item.source === 'hackernews' || item.source === 'hn') {\r\n      return 'news'\r\n    }\r\n    if (item.api_source || item.adapter_name) {\r\n      return item.api_source || item.adapter_name\r\n    }\r\n\r\n    return 'generic'\r\n  }\r\n\r\n  calculateReadabilityScore(text) {\r\n    if (!text || text.length === 0) return 0\r\n\r\n    const words = text.split(/\\s+/).length\r\n    const sentences = text.split(/[.!?]+/).length\r\n\r\n    if (sentences === 0) return 0\r\n\r\n    // Simplified readability based on average words per sentence\r\n    const avgWordsPerSentence = words / sentences\r\n\r\n    // Ideal range: 10-20 words per sentence\r\n    if (avgWordsPerSentence >= 10 && avgWordsPerSentence <= 20) {\r\n      return 70\r\n    } else if (avgWordsPerSentence >= 5 && avgWordsPerSentence <= 25) {\r\n      return 50\r\n    } else {\r\n      return 30\r\n    }\r\n  }\r\n\r\n  calculateAdapterQualityScore(item) {\r\n    let score = 0.5\r\n\r\n    // Adapter confidence bonus\r\n    if (item.confidence && item.confidence > 0.7) {\r\n      score += 0.1\r\n    }\r\n\r\n    // Content length bonus\r\n    if (item.word_count && item.word_count > 30) {\r\n      score += 0.1\r\n    }\r\n\r\n    // Readability bonus\r\n    if (item.readability_score && item.readability_score > 40) {\r\n      score += 0.1\r\n    }\r\n\r\n    // Author/source presence\r\n    if (item.author || item.source) {\r\n      score += 0.05\r\n    }\r\n\r\n    // Published date presence\r\n    if (item.published_at) {\r\n      score += 0.05\r\n    }\r\n\r\n    // Fresh content bonus\r\n    if (item.source_freshness === 'fresh') {\r\n      score += 0.1\r\n    }\r\n\r\n    // Adapter type bonuses\r\n    switch (item.adapter_type) {\r\n      case 'news':\r\n        score += 0.05\r\n        break\r\n      case 'documentation':\r\n        score += 0.05\r\n        break\r\n      case 'social':\r\n        score -= 0.05 // Social media often lower quality\r\n        break\r\n    }\r\n\r\n    return Math.max(0, Math.min(1, score))\r\n  }\r\n\r\n  assessFreshness(publishedAt, freshFilter) {\r\n    if (!publishedAt || !freshFilter || freshFilter === 'all') {\r\n      return 'unknown'\r\n    }\r\n\r\n    try {\r\n      const published = new Date(publishedAt)\r\n      const now = new Date()\r\n      const ageMs = now.getTime() - published.getTime()\r\n\r\n      switch (freshFilter) {\r\n        case 'd1':\r\n          return ageMs <= 24 * 60 * 60 * 1000 ? 'fresh' : 'stale'\r\n        case 'd7':\r\n          return ageMs <= 7 * 24 * 60 * 60 * 1000 ? 'fresh' : 'stale'\r\n        case 'd30':\r\n          return ageMs <= 30 * 24 * 60 * 60 * 1000 ? 'fresh' : 'stale'\r\n        case 'd365':\r\n          return ageMs <= 365 * 24 * 60 * 60 * 1000 ? 'fresh' : 'stale'\r\n        default:\r\n          return 'unknown'\r\n      }\r\n    } catch (error) {\r\n      return 'unknown'\r\n    }\r\n  }\r\n\r\n  detectLanguage(item) {\r\n    // Simplified language detection based on content\r\n    const text = (item.title || '') + ' ' + (item.snippet || '')\r\n\r\n    // Common non-English patterns\r\n    if (text.match(/[\u00E0\u00E1\u00E2\u00E3\u00E4\u00E5\u00E6\u00E7\u00E8\u00E9\u00EA\u00EB\u00EC\u00ED\u00EE\u00EF\u00F0\u00F1\u00F2\u00F3\u00F4\u00F5\u00F6\u00F7\u00F8\u00F9\u00FA\u00FB\u00FC\u00FD\u00FE\u00FF]/i)) {\r\n      return 'other'\r\n    }\r\n\r\n    return 'en'\r\n  }\r\n\r\n  extractAndNormalizeTags(item) {\r\n    const tags = []\r\n\r\n    // Extract from explicit tags field\r\n    if (item.tags && Array.isArray(item.tags)) {\r\n      tags.push(...item.tags)\r\n    }\r\n\r\n    // Extract from categories\r\n    if (item.categories && Array.isArray(item.categories)) {\r\n      tags.push(...item.categories)\r\n    }\r\n\r\n    // Extract from title/snippet keywords (simplified)\r\n    const text = ((item.title || '') + ' ' + (item.snippet || '')).toLowerCase()\r\n    const keywords = ['javascript', 'python', 'react', 'node', 'api', 'tutorial', 'guide']\r\n\r\n    for (const keyword of keywords) {\r\n      if (text.includes(keyword)) {\r\n        tags.push(keyword)\r\n      }\r\n    }\r\n\r\n    // Normalize and deduplicate\r\n    return [...new Set(tags.map(tag =>\r\n      typeof tag === 'string' ? tag.toLowerCase().trim() : ''\r\n    ).filter(tag => tag.length > 0))].slice(0, 10)\r\n  }\r\n\r\n  detectContentType(item) {\r\n    const title = (item.title || '').toLowerCase()\r\n    const snippet = (item.snippet || '').toLowerCase()\r\n    const url = (item.url || '').toLowerCase()\r\n\r\n    if (url.includes('/blog/') || title.includes('blog') || snippet.includes('posted')) {\r\n      return 'blog'\r\n    }\r\n    if (url.includes('/news/') || title.includes('news') || snippet.includes('breaking')) {\r\n      return 'news'\r\n    }\r\n    if (url.includes('/docs/') || url.includes('/documentation/') || snippet.includes('api')) {\r\n      return 'documentation'\r\n    }\r\n    if (item.adapter_type === 'social' || item.adapter_type === 'forum') {\r\n      return item.adapter_type\r\n    }\r\n\r\n    return 'article'\r\n  }\r\n\r\n  async checkRobotsCompliance(url, env) {\r\n    if (!this.robotsChecker) {\r\n      this.robotsChecker = new RobotsChecker(env)\r\n    }\r\n\r\n    try {\r\n      const result = await this.robotsChecker.isAllowed(url)\r\n      return {\r\n        allowed: result.allowed,\r\n        status: result.status,\r\n        cached: result.cached\r\n      }\r\n    } catch (error) {\r\n      console.warn('Robots compliance check failed:', error.message)\r\n      return {\r\n        allowed: true, // Default to allowed on error\r\n        status: 'error',\r\n        cached: false\r\n      }\r\n    }\r\n  }\r\n}\r\n", "/**\r\n * Provider Ledger - Circuit Breaker and Health Tracking\r\n * Manages provider health states with KV persistence\r\n */\r\n\r\nexport class ProviderLedger {\r\n  constructor(env) {\r\n    this.env = env\r\n    this.kv = env.PROVIDER_LEDGER\r\n    this.inMemoryStates = new Map()\r\n    this.memoryTtl = 5 * 60 * 1000 // 5 minutes fallback TTL\r\n\r\n    // Configuration\r\n    this.defaultQuotaResetMs = parseInt(env.LEDGER_DEFAULT_QUOTA_RESET_MS || '3600000') // 1 hour\r\n    this.tempFailCooldownMs = parseInt(env.TEMP_FAIL_COOLDOWN_MS || '300000') // 5 minutes\r\n    this.failureWindowMs = 5 * 60 * 1000 // 5 minutes for failure detection\r\n    this.maxFailures = 3 // Max failures before TEMP_FAIL\r\n  }\r\n\r\n  /**\r\n   * Load all provider states from KV\r\n   */\r\n  async loadStates() {\r\n    if (!this.kv) {\r\n      console.warn('PROVIDER_LEDGER KV not available, using in-memory only')\r\n      return\r\n    }\r\n\r\n    try {\r\n      const keys = await this.kv.list({ prefix: 'providers:' })\r\n      const states = new Map()\r\n\r\n      for (const key of keys.keys) {\r\n        try {\r\n          const value = await this.kv.get(key.name)\r\n          if (value) {\r\n            const state = JSON.parse(value)\r\n            states.set(key.name.replace('providers:', ''), state)\r\n          }\r\n        } catch (error) {\r\n          console.warn(`Failed to load state for ${key.name}:`, error.message)\r\n        }\r\n      }\r\n\r\n      this.inMemoryStates = states\r\n    } catch (error) {\r\n      console.warn('Failed to load provider states from KV:', error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save all provider states to KV\r\n   */\r\n  async saveStates() {\r\n    if (!this.kv) return\r\n\r\n    try {\r\n      const promises = []\r\n      for (const [name, state] of this.inMemoryStates) {\r\n        promises.push(this.kv.put(`providers:${name}`, JSON.stringify(state)))\r\n      }\r\n      await Promise.all(promises)\r\n    } catch (error) {\r\n      console.warn('Failed to save provider states to KV:', error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get provider state\r\n   */\r\n  getProviderState(name) {\r\n    return this.inMemoryStates.get(name) || this._createDefaultState()\r\n  }\r\n\r\n  /**\r\n   * Get all provider states for diagnostics\r\n   */\r\n  getDiagnostics(providerName = null) {\r\n    if (providerName) {\r\n      return this.getProviderState(providerName)\r\n    }\r\n\r\n    const states = {}\r\n    for (const [name, state] of this.inMemoryStates) {\r\n      states[name] = this._formatStateForDiagnostics(state)\r\n    }\r\n    return states\r\n  }\r\n\r\n  /**\r\n   * Format state for diagnostics (hide sensitive data)\r\n   */\r\n  _formatStateForDiagnostics(state) {\r\n    const totalRequests = (state.rolling.successCount || 0) +\r\n                         (state.rolling.timeoutCount || 0) +\r\n                         (state.rolling.error4xxCount || 0) +\r\n                         (state.rolling.error5xxCount || 0)\r\n\r\n    const successRate = totalRequests > 0 ?\r\n      ((state.rolling.successCount || 0) / totalRequests * 100).toFixed(1) : '0.0'\r\n\r\n    const timeoutRate = totalRequests > 0 ?\r\n      ((state.rolling.timeoutCount || 0) / totalRequests * 100).toFixed(1) : '0.0'\r\n\r\n    const error4xxRate = totalRequests > 0 ?\r\n      ((state.rolling.error4xxCount || 0) / totalRequests * 100).toFixed(1) : '0.0'\r\n\r\n    const error5xxRate = totalRequests > 0 ?\r\n      ((state.rolling.error5xxCount || 0) / totalRequests * 100).toFixed(1) : '0.0'\r\n\r\n    return {\r\n      status: state.status,\r\n      resetAt: state.resetAt,\r\n      lastUsedAt: state.lastUsedAt,\r\n      successRate: `${successRate}%`,\r\n      timeoutRate: `${timeoutRate}%`,\r\n      error4xxRate: `${error4xxRate}%`,\r\n      error5xxRate: `${error5xxRate}%`,\r\n      p50Latency: state.latencyMsP50,\r\n      p95Latency: state.latencyMsP95,\r\n      dailyUsed: state.dailyUsed || 0,\r\n      dailyCap: state.dailyCap || 0,\r\n      monthlyUsed: state.monthlyUsed || 0,\r\n      monthlyCap: state.monthlyCap || 0,\r\n      remaining: Math.max(0, (state.dailyCap || 0) - (state.dailyUsed || 0)),\r\n      // AdultMedia dual-cap support\r\n      requestsDailyUsed: state.requestsDailyUsed || 0,\r\n      requestsDailyCap: state.requestsDailyCap || 0,\r\n      objectsDailyUsed: state.objectsDailyUsed || 0,\r\n      objectsDailyCap: state.objectsDailyCap || 0,\r\n      requestsRemaining: Math.max(0, (state.requestsDailyCap || 0) - (state.requestsDailyUsed || 0)),\r\n      lastSkipReason: state.lastSkipReason || null,\r\n      rolling: state.rolling\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if provider should be used\r\n   */\r\n  shouldUse(name, now = Date.now()) {\r\n    const state = this.getProviderState(name)\r\n\r\n    if (state.status === 'QUOTA_EXCEEDED') {\r\n      if (state.resetAt && now >= new Date(state.resetAt).getTime()) {\r\n        // Reset quota exceeded status\r\n        state.status = 'OK'\r\n        state.resetAt = null\r\n        this.inMemoryStates.set(name, state)\r\n        return true\r\n      }\r\n      return false\r\n    }\r\n\r\n    if (state.status === 'TEMP_FAIL') {\r\n      if (state.resetAt && now >= new Date(state.resetAt).getTime()) {\r\n        // Reset temp fail status\r\n        state.status = 'OK'\r\n        state.resetAt = null\r\n        this.inMemoryStates.set(name, state)\r\n        return true\r\n      }\r\n      return false\r\n    }\r\n\r\n    return state.status === 'OK'\r\n  }\r\n\r\n  /**\r\n   * Check if provider is healthy (OK status)\r\n   */\r\n  isProviderHealthy(name) {\r\n    return this.shouldUse(name)\r\n  }\r\n\r\n  /**\r\n   * Record successful request\r\n   */\r\n  recordSuccess(name, latencyMs = null) {\r\n    const state = this.getProviderState(name)\r\n    const now = new Date().toISOString()\r\n\r\n    state.status = 'OK'\r\n    state.lastSuccessAt = now\r\n    state.lastUsedAt = now\r\n    state.resetAt = null\r\n\r\n    // Update rolling counters\r\n    state.rolling.successCount = (state.rolling.successCount || 0) + 1\r\n\r\n    // Update latency estimates\r\n    if (latencyMs !== null) {\r\n      this._updateLatencyEstimates(state, latencyMs)\r\n    }\r\n\r\n    this.inMemoryStates.set(name, state)\r\n  }\r\n\r\n  /**\r\n   * Record timeout error\r\n   */\r\n  recordTimeout(name) {\r\n    const state = this.getProviderState(name)\r\n    const now = new Date().toISOString()\r\n\r\n    state.lastFailureAt = now\r\n    state.lastUsedAt = now\r\n    state.rolling.timeoutCount = (state.rolling.timeoutCount || 0) + 1\r\n\r\n    this._checkFailureThreshold(name, state)\r\n    this.inMemoryStates.set(name, state)\r\n  }\r\n\r\n  /**\r\n   * Record 4xx error\r\n   */\r\n  recordError(name, type) {\r\n    const state = this.getProviderState(name)\r\n    const now = new Date().toISOString()\r\n\r\n    state.lastFailureAt = now\r\n    state.lastUsedAt = now\r\n\r\n    if (type === '4xx') {\r\n      state.rolling.error4xxCount = (state.rolling.error4xxCount || 0) + 1\r\n    } else if (type === '5xx') {\r\n      state.rolling.error5xxCount = (state.rolling.error5xxCount || 0) + 1\r\n    }\r\n\r\n    this._checkFailureThreshold(name, state)\r\n    this.inMemoryStates.set(name, state)\r\n  }\r\n\r\n  /**\r\n   * Mark quota exceeded\r\n   */\r\n  markQuotaExceeded(name, resetAtHint = null) {\r\n    const state = this.getProviderState(name)\r\n    const now = Date.now()\r\n\r\n    state.status = 'QUOTA_EXCEEDED'\r\n    state.lastFailureAt = new Date().toISOString()\r\n    state.lastUsedAt = new Date().toISOString()\r\n    state.rolling.quotaCount = (state.rolling.quotaCount || 0) + 1\r\n\r\n    // Set reset time\r\n    if (resetAtHint) {\r\n      state.resetAt = resetAtHint\r\n    } else {\r\n      state.resetAt = new Date(now + this.defaultQuotaResetMs).toISOString()\r\n    }\r\n\r\n    this.inMemoryStates.set(name, state)\r\n  }\r\n\r\n  /**\r\n   * Create default state for new providers\r\n   */\r\n  _createDefaultState() {\r\n    return {\r\n      status: 'OK',\r\n      resetAt: null,\r\n      lastFailureAt: null,\r\n      lastSuccessAt: null,\r\n      lastUsedAt: null,\r\n      dailyUsed: 0,\r\n      dailyCap: 0,\r\n      monthlyUsed: 0,\r\n      monthlyCap: 0,\r\n      // AdultMedia dual-cap support\r\n      requestsDailyUsed: 0,\r\n      requestsDailyCap: 0,\r\n      objectsDailyUsed: 0,\r\n      objectsDailyCap: 0,\r\n      nextDailyResetAt: this._getNextDailyReset(),\r\n      nextMonthlyResetAt: this._getNextMonthlyReset(),\r\n      lastSkipReason: null,\r\n      rolling: {\r\n        successCount: 0,\r\n        timeoutCount: 0,\r\n        error4xxCount: 0,\r\n        error5xxCount: 0,\r\n        quotaCount: 0\r\n      },\r\n      latencyMsP50: null,\r\n      latencyMsP95: null,\r\n      latencySamples: []\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update latency estimates using rolling window\r\n   */\r\n  _updateLatencyEstimates(state, latencyMs) {\r\n    // Keep last 100 samples for estimation\r\n    if (!state.latencySamples) state.latencySamples = []\r\n    state.latencySamples.push(latencyMs)\r\n    if (state.latencySamples.length > 100) {\r\n      state.latencySamples.shift()\r\n    }\r\n\r\n    if (state.latencySamples.length >= 10) {\r\n      const sorted = [...state.latencySamples].sort((a, b) => a - b)\r\n      state.latencyMsP50 = sorted[Math.floor(sorted.length * 0.5)]\r\n      state.latencyMsP95 = sorted[Math.floor(sorted.length * 0.95)]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if failures exceed threshold and trigger TEMP_FAIL\r\n   */\r\n  _checkFailureThreshold(name, state) {\r\n    const recentFailures = (state.rolling.timeoutCount || 0) +\r\n                          (state.rolling.error5xxCount || 0)\r\n\r\n    if (recentFailures >= this.maxFailures) {\r\n      state.status = 'TEMP_FAIL'\r\n      state.resetAt = new Date(Date.now() + this.tempFailCooldownMs).toISOString()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Increment requests daily usage counter (for AdultMedia dual-cap)\r\n   */\r\n  incrementRequestsDailyUsed(name) {\r\n    const state = this.getProviderState(name)\r\n    state.requestsDailyUsed = (state.requestsDailyUsed || 0) + 1\r\n    this.inMemoryStates.set(name, state)\r\n  }\r\n\r\n  /**\r\n   * Increment objects daily usage counter (for AdultMedia dual-cap)\r\n   */\r\n  incrementObjectsDailyUsed(name, count) {\r\n    const state = this.getProviderState(name)\r\n    state.objectsDailyUsed = (state.objectsDailyUsed || 0) + count\r\n    this.inMemoryStates.set(name, state)\r\n  }\r\n\r\n  /**\r\n   * Set requests daily cap for provider (for AdultMedia dual-cap)\r\n   */\r\n  setRequestsDailyCap(name, cap) {\r\n    const state = this.getProviderState(name)\r\n    state.requestsDailyCap = cap\r\n    this.inMemoryStates.set(name, state)\r\n  }\r\n\r\n  /**\r\n   * Set objects daily cap for provider (for AdultMedia dual-cap)\r\n   */\r\n  setObjectsDailyCap(name, cap) {\r\n    const state = this.getProviderState(name)\r\n    state.objectsDailyCap = cap\r\n    this.inMemoryStates.set(name, state)\r\n  }\r\n\r\n  /**\r\n   * Increment monthly usage counter\r\n   */\r\n  incrementMonthlyUsed(name) {\r\n    const state = this.getProviderState(name)\r\n    state.monthlyUsed = (state.monthlyUsed || 0) + 1\r\n    this.inMemoryStates.set(name, state)\r\n  }\r\n\r\n  /**\r\n   * Set daily cap for provider\r\n   */\r\n  setDailyCap(name, cap) {\r\n    const state = this.getProviderState(name)\r\n    state.dailyCap = cap\r\n    this.inMemoryStates.set(name, state)\r\n  }\r\n\r\n  /**\r\n   * Set monthly cap for provider\r\n   */\r\n  setMonthlyCap(name, cap) {\r\n    const state = this.getProviderState(name)\r\n    state.monthlyCap = cap\r\n    this.inMemoryStates.set(name, state)\r\n  }\r\n\r\n  /**\r\n   * Set last skip reason\r\n   */\r\n  setLastSkipReason(name, reason) {\r\n    const state = this.getProviderState(name)\r\n    state.lastSkipReason = reason\r\n    this.inMemoryStates.set(name, state)\r\n  }\r\n\r\n  /**\r\n   * Get next daily reset time (00:00 America/New_York)\r\n   */\r\n  _getNextDailyReset() {\r\n    const now = new Date()\r\n    const nextReset = new Date(now)\r\n    nextReset.setUTCHours(4, 0, 0, 0) // 00:00 EST = 04:00 UTC\r\n    if (nextReset <= now) {\r\n      nextReset.setDate(nextReset.getDate() + 1)\r\n    }\r\n    return nextReset.toISOString()\r\n  }\r\n\r\n  /**\r\n   * Get next monthly reset time (1st of next month)\r\n   */\r\n  _getNextMonthlyReset() {\r\n    const now = new Date()\r\n    const nextReset = new Date(now.getFullYear(), now.getMonth() + 1, 1)\r\n    return nextReset.toISOString()\r\n  }\r\n}\r\n", "/**\r\n * Adapter Registry - Provider Management and Metadata\r\n * Central registry for all search providers with metadata\r\n */\r\n\r\nexport class AdapterRegistry {\r\n  constructor() {\r\n    this.providers = new Map()\r\n  }\r\n\r\n  /**\r\n   * Register a provider\r\n   */\r\n  register({\r\n    name,\r\n    version,\r\n    type,\r\n    searchFn,\r\n    supportsFreshness = 'none',\r\n    defaultWeightByMode = {},\r\n    priority = 0,\r\n    cooldowns = {}\r\n  }) {\r\n    if (!name || !searchFn) {\r\n      throw new Error('Provider name and searchFn are required')\r\n    }\r\n\r\n    this.providers.set(name, {\r\n      name,\r\n      version: version || '1.0.0',\r\n      type: type || 'api',\r\n      searchFn,\r\n      supportsFreshness,\r\n      defaultWeightByMode,\r\n      priority,\r\n      cooldowns,\r\n      registeredAt: new Date().toISOString()\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Get provider by name\r\n   */\r\n  get(name) {\r\n    const provider = this.providers.get(name)\r\n    if (!provider) {\r\n      throw new Error(`Provider '${name}' not found in registry`)\r\n    }\r\n    return provider\r\n  }\r\n\r\n  /**\r\n   * List all registered providers\r\n   */\r\n  list() {\r\n    return Array.from(this.providers.values()).map(provider => ({\r\n      name: provider.name,\r\n      version: provider.version,\r\n      type: provider.type,\r\n      supportsFreshness: provider.supportsFreshness,\r\n      priority: provider.priority,\r\n      defaultWeights: provider.defaultWeightByMode\r\n    }))\r\n  }\r\n\r\n  /**\r\n   * Check if provider exists\r\n   */\r\n  has(name) {\r\n    return this.providers.has(name)\r\n  }\r\n\r\n  /**\r\n   * Get provider metadata for diagnostics\r\n   */\r\n  getMetadata(name) {\r\n    const provider = this.get(name)\r\n    return {\r\n      name: provider.name,\r\n      version: provider.version,\r\n      type: provider.type,\r\n      supportsFreshness: provider.supportsFreshness,\r\n      priority: provider.priority,\r\n      defaultWeights: provider.defaultWeightByMode,\r\n      registeredAt: provider.registeredAt\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all metadata for diagnostics\r\n   */\r\n  getAllMetadata() {\r\n    const metadata = {}\r\n    for (const [name] of this.providers) {\r\n      metadata[name] = this.getMetadata(name)\r\n    }\r\n    return metadata\r\n  }\r\n\r\n  /**\r\n   * Get providers by type\r\n   */\r\n  getByType(type) {\r\n    return Array.from(this.providers.values())\r\n      .filter(provider => provider.type === type)\r\n      .map(provider => provider.name)\r\n  }\r\n\r\n  /**\r\n   * Get providers sorted by priority (highest first)\r\n   */\r\n  getByPriority() {\r\n    return Array.from(this.providers.values())\r\n      .sort((a, b) => b.priority - a.priority)\r\n      .map(provider => provider.name)\r\n  }\r\n}\r\n", "import {\r\n  GoogleProvider,\r\n  SerpApiProvider,\r\n  SerperProvider,\r\n  YandexProvider,\r\n  BraveProvider,\r\n  SerpHouseProvider,\r\n  AdultMediaProvider,\r\n  QualityPornProvider,\r\n  ApifyProvider,\r\n  ScrapersProvider,\r\n  AdaptersProvider\r\n  // SeznamProvider // Disabled - API endpoint doesn't exist\r\n} from './sources/index.js'\r\nimport { ProviderLedger } from './provider-ledger.js'\r\nimport { AdapterRegistry } from './adapter-registry.js'\r\n\r\n/**\r\n * Search Service with Scoped Provider Chains\r\n */\r\nexport class SearchService {\r\n  constructor(env) {\r\n    this.env = env\r\n    this.ledger = new ProviderLedger(env)\r\n    this.registry = new AdapterRegistry()\r\n\r\n    // Initialize provider caps\r\n    this._initializeProviderCaps()\r\n\r\n    // Create provider instances\r\n    this.providers = this._createProviderInstances()\r\n\r\n    // Define chains by mode\r\n    this.chains = {\r\n      normal: {\r\n        google_slice: ['google', 'serpapi', /* 'seznam', */ 'adapters_scrapers_parallel', 'apify'], // Disabled - API endpoint doesn't exist\r\n        adult_slice: ['adultmedia', 'qualityporn', 'adapters_scrapers_parallel', 'apify'],\r\n        adapters_slice: ['adapters_parallel', 'apify'],\r\n        scrapers_slice: ['scrapers_parallel', 'apify']\r\n      },\r\n      deep_niche: {\r\n        serper_slice: ['serper', 'yandex', 'brave', 'serphouse', 'adapters_scrapers_parallel', 'apify'],\r\n        adapters_slice: ['adapters_parallel', 'apify'],\r\n        scrapers_slice: ['scrapers_parallel', 'apify'],\r\n        adultmedia_slice: ['adultmedia', 'qualityporn', 'adapters_scrapers_parallel', 'apify'],\r\n        qualityporn_slice: ['qualityporn', 'adapters_scrapers_parallel', 'apify']\r\n      }\r\n    }\r\n\r\n    // Slice weights by mode\r\n    this.sliceWeights = {\r\n      normal: {\r\n        google_slice: 0.50,\r\n        adult_slice: 0.30,\r\n        adapters_slice: 0.10,\r\n        scrapers_slice: 0.10\r\n      },\r\n      deep_niche: {\r\n        serper_slice: 0.40,\r\n        adapters_slice: 0.15,\r\n        scrapers_slice: 0.15,\r\n        adultmedia_slice: 0.15,\r\n        qualityporn_slice: 0.15\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize provider daily/monthly caps\r\n   */\r\n  _initializeProviderCaps() {\r\n    // Set caps in ledger\r\n    this.ledger.setDailyCap('google', 100)\r\n    this.ledger.setMonthlyCap('google', 3000)\r\n\r\n    this.ledger.setDailyCap('serpapi', 100)\r\n    this.ledger.setMonthlyCap('serpapi', 3000)\r\n\r\n    // this.ledger.setDailyCap('seznam', 6) // 200/30 = ~6.67\r\n    // this.ledger.setMonthlyCap('seznam', 200) // Disabled - API endpoint doesn't exist\r\n\r\n    this.ledger.setDailyCap('serper', 83) // 2500/30 = ~83.33\r\n    this.ledger.setMonthlyCap('serper', 2500)\r\n\r\n    this.ledger.setDailyCap('yandex', 3) // 100/30 = ~3.33\r\n    this.ledger.setMonthlyCap('yandex', 100)\r\n\r\n    this.ledger.setDailyCap('brave', 66) // 2000/30 = ~66.67\r\n    this.ledger.setMonthlyCap('brave', 2000)\r\n\r\n    this.ledger.setDailyCap('serphouse', 13) // 400/30 = ~13.33\r\n    this.ledger.setMonthlyCap('serphouse', 400)\r\n\r\n    this.ledger.setDailyCap('adultmedia', 50) // ~50/day requests\r\n    this.ledger.setMonthlyCap('adultmedia', 1500) // requests per month\r\n    this.ledger.setRequestsDailyCap('adultmedia', 50) // 25 objects/request \u00D7 50 = 1250 objects\r\n    this.ledger.setObjectsDailyCap('adultmedia', 1250) // API's actual quota\r\n\r\n    this.ledger.setDailyCap('qualityporn', 300)\r\n    this.ledger.setMonthlyCap('qualityporn', 9000)\r\n\r\n    this.ledger.setMonthlyCap('apify', 1428) // No daily cap\r\n\r\n    // Scrapers and adapters have no caps\r\n  }\r\n\r\n  /**\r\n   * Create provider instances\r\n   */\r\n  _createProviderInstances() {\r\n    return {\r\n      google: new GoogleProvider(),\r\n      serpapi: new SerpApiProvider(),\r\n      serper: new SerperProvider(),\r\n      yandex: new YandexProvider(),\r\n      brave: new BraveProvider(),\r\n      serphouse: new SerpHouseProvider(),\r\n      adultmedia: new AdultMediaProvider(),\r\n      qualityporn: new QualityPornProvider(),\r\n      apify: new ApifyProvider(),\r\n      scrapers: new ScrapersProvider(),\r\n      adapters: new AdaptersProvider()\r\n      // seznam: new SeznamProvider() // Disabled - API endpoint doesn't exist\r\n    }\r\n  }\r\n\r\n  async search(options) {\r\n    const { query, limit = 10, mode = 'normal', debug = false } = options\r\n\r\n    // Load provider states\r\n    await this.ledger.loadStates()\r\n\r\n    try {\r\n      // Execute search by mode\r\n      const results = await this.executeSearch(query, { ...options, mode, limit, debug })\r\n\r\n      // Save provider states\r\n      await this.ledger.saveStates()\r\n\r\n      return this.formatResults(results, limit, debug)\r\n\r\n    } catch (error) {\r\n      console.error('Search service error:', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute search based on mode\r\n   */\r\n  async executeSearch(query, options) {\r\n    const { mode, limit, debug } = options\r\n    const sliceWeights = this.sliceWeights[mode] || this.sliceWeights.normal\r\n\r\n    // Calculate slice quotas\r\n    const sliceQuotas = this._calculateSliceQuotas(sliceWeights, limit)\r\n\r\n    if (debug) {\r\n      console.log(`Executing ${mode} search with quotas:`, sliceQuotas)\r\n    }\r\n\r\n    // Execute slices in parallel\r\n    const slicePromises = Object.entries(sliceQuotas).map(async ([sliceName, quota]) => {\r\n      if (quota === 0) return { slice: sliceName, results: [], requested: 0, delivered: 0, chain: [] }\r\n\r\n      return await this.executeSlice(sliceName, query, { ...options, limit: quota })\r\n    })\r\n\r\n    const slices = await Promise.all(slicePromises)\r\n\r\n    // Collect results\r\n    const allResults = []\r\n    const sliceBreakdown = {}\r\n\r\n    for (const slice of slices) {\r\n      allResults.push(...slice.results)\r\n      sliceBreakdown[slice.slice] = {\r\n        requested: slice.requested,\r\n        delivered: slice.delivered,\r\n        chain: slice.chain\r\n      }\r\n    }\r\n\r\n    // Deduplicate\r\n    const deduplicated = this.deduplicateResults(allResults)\r\n\r\n    return {\r\n      results: deduplicated.slice(0, limit),\r\n      totalUnique: deduplicated.length,\r\n      dedupedCount: allResults.length - deduplicated.length,\r\n      sliceBreakdown,\r\n      mode\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate slice quotas\r\n   */\r\n  _calculateSliceQuotas(sliceWeights, totalLimit) {\r\n    const quotas = {}\r\n    let totalAllocated = 0\r\n\r\n    for (const [slice, weight] of Object.entries(sliceWeights)) {\r\n      quotas[slice] = Math.floor(weight * totalLimit)\r\n      totalAllocated += quotas[slice]\r\n    }\r\n\r\n    // Distribute remainder\r\n    const remainder = totalLimit - totalAllocated\r\n    const sliceOrder = Object.keys(sliceWeights)\r\n\r\n    for (let i = 0; i < remainder; i++) {\r\n      const slice = sliceOrder[i % sliceOrder.length]\r\n      quotas[slice]++\r\n    }\r\n\r\n    return quotas\r\n  }\r\n\r\n  /**\r\n   * Execute a slice using its chain\r\n   */\r\n  async executeSlice(sliceName, query, options) {\r\n    const { limit, debug } = options\r\n    const chain = this.chains[options.mode][sliceName] || []\r\n    const results = []\r\n    const chainLog = []\r\n    let delivered = 0\r\n\r\n    for (const providerName of chain) {\r\n      if (delivered >= limit) break\r\n\r\n      try {\r\n        const providerResults = await this.executeProviderInChain(providerName, query, {\r\n          ...options,\r\n          limit: limit - delivered\r\n        })\r\n\r\n        if (providerResults.length > 0) {\r\n          results.push(...providerResults)\r\n          delivered += providerResults.length\r\n          chainLog.push({\r\n            provider: providerName,\r\n            added: providerResults.length,\r\n            status: 'success'\r\n          })\r\n\r\n          if (debug) {\r\n            console.log(`${sliceName}: ${providerName} added ${providerResults.length} results`)\r\n          }\r\n        } else {\r\n          chainLog.push({\r\n            provider: providerName,\r\n            added: 0,\r\n            status: 'no_results'\r\n          })\r\n        }\r\n      } catch (error) {\r\n        chainLog.push({\r\n          provider: providerName,\r\n          added: 0,\r\n          status: 'error',\r\n          error: error.message\r\n        })\r\n\r\n        if (debug) {\r\n          console.log(`${sliceName}: ${providerName} error: ${error.message}`)\r\n        }\r\n      }\r\n    }\r\n\r\n    return { slice: sliceName, results, requested: limit, delivered, chain: chainLog }\r\n  }\r\n\r\n  /**\r\n   * Execute provider in chain with cap checking\r\n   */\r\n  async executeProviderInChain(providerName, query, options) {\r\n    // Handle special parallel cases\r\n    if (providerName === 'adapters_scrapers_parallel') {\r\n      return await this.executeParallel(['adapters', 'scrapers'], query, options)\r\n    }\r\n\r\n    if (providerName === 'adapters_parallel') {\r\n      return await this.executeParallel(['adapters'], query, options)\r\n    }\r\n\r\n    if (providerName === 'scrapers_parallel') {\r\n      return await this.executeParallel(['scrapers'], query, options)\r\n    }\r\n\r\n    // Check provider health and caps\r\n    if (!this.ledger.isProviderHealthy(providerName)) {\r\n      this.ledger.setLastSkipReason(providerName, 'unhealthy')\r\n      return []\r\n    }\r\n\r\n    const state = this.ledger.getProviderState(providerName)\r\n    \r\n    // Special handling for AdultMedia dual-cap system\r\n    if (providerName === 'adultmedia') {\r\n      if (state.requestsDailyCap && state.requestsDailyUsed >= state.requestsDailyCap) {\r\n        this.ledger.setLastSkipReason(providerName, 'requests_daily_cap_exceeded')\r\n        return []\r\n      }\r\n    } else {\r\n      // Standard cap checking for other providers\r\n      if (state.dailyCap && state.dailyUsed >= state.dailyCap) {\r\n        this.ledger.setLastSkipReason(providerName, 'daily_cap_exceeded')\r\n        return []\r\n      }\r\n    }\r\n\r\n    if (state.monthlyCap && state.monthlyUsed >= state.monthlyCap) {\r\n      this.ledger.setLastSkipReason(providerName, 'monthly_cap_exceeded')\r\n      return []\r\n    }\r\n\r\n    // Execute provider\r\n    const provider = this.providers[providerName]\r\n    if (!provider) return []\r\n\r\n    try {\r\n      const results = await provider.search(query, { ...options, ledger: this.ledger }, this.env)\r\n\r\n      // Record usage - AdultMedia handles its own dual-cap counters\r\n      if (providerName === 'adultmedia') {\r\n        // AdultMedia provider handles incrementRequestsDailyUsed and incrementObjectsDailyUsed\r\n        this.ledger.incrementMonthlyUsed(providerName)\r\n      } else if (providerName !== 'apify') { // Apify only has monthly cap\r\n        this.ledger.incrementDailyUsed(providerName)\r\n        this.ledger.incrementMonthlyUsed(providerName)\r\n      } else {\r\n        this.ledger.incrementMonthlyUsed(providerName)\r\n      }\r\n      this.ledger.recordSuccess(providerName)\r\n\r\n      return results.map(result => ({\r\n        ...result,\r\n        source: providerName\r\n      }))\r\n\r\n    } catch (error) {\r\n      this.handleProviderError(providerName, error)\r\n      return []\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute providers in parallel\r\n   */\r\n  async executeParallel(providerNames, query, options) {\r\n    const promises = providerNames.map(name =>\r\n      this.executeProviderInChain(name, query, options)\r\n    )\r\n\r\n    const resultsArrays = await Promise.all(promises)\r\n    return resultsArrays.flat()\r\n  }\r\n\r\n  /**\r\n   * Handle provider errors\r\n   */\r\n  handleProviderError(providerName, error) {\r\n    if (error.message === 'QUOTA_EXCEEDED_DAILY') {\r\n      this.ledger.markQuotaExceeded(providerName, this.ledger._getNextDailyReset())\r\n    } else if (error.message === 'QUOTA_EXCEEDED_MONTHLY') {\r\n      this.ledger.markQuotaExceeded(providerName)\r\n    } else if (error.message.includes('5') || error.message.includes('timeout')) {\r\n      this.ledger.recordError(providerName, '5xx')\r\n    } else {\r\n      this.ledger.recordError(providerName, '4xx')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deduplicate results\r\n   */\r\n  deduplicateResults(results) {\r\n    const seen = new Set()\r\n    const deduplicated = []\r\n\r\n    for (const result of results) {\r\n      const canonicalUrl = this.canonicalizeUrl(result.url)\r\n      if (!seen.has(canonicalUrl)) {\r\n        seen.add(canonicalUrl)\r\n        deduplicated.push(result)\r\n      }\r\n    }\r\n\r\n    return deduplicated\r\n  }\r\n\r\n  /**\r\n   * Canonicalize URL\r\n   */\r\n  canonicalizeUrl(url) {\r\n    try {\r\n      const parsed = new URL(url)\r\n      const trackingParams = ['utm_source', 'utm_medium', 'utm_campaign', 'utm_term', 'utm_content', 'fbclid', 'gclid']\r\n      trackingParams.forEach(param => parsed.searchParams.delete(param))\r\n      return `${parsed.host}${parsed.pathname}${parsed.search}`.toLowerCase()\r\n    } catch {\r\n      return url.toLowerCase()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Format final results\r\n   */\r\n  formatResults(searchResult, limit, debug = false) {\r\n    const results = searchResult.results || []\r\n\r\n    const formatted = results.slice(0, limit).map(result => ({\r\n      title: result.title || 'No title',\r\n      url: result.url || '#',\r\n      snippet: result.snippet || '',\r\n      source: result.source || 'unknown',\r\n      score: result.score || 0,\r\n      thumbnail: result.thumbnail || null,\r\n      published_at: result.published_at || null,\r\n      author: result.author || null\r\n    }))\r\n\r\n    const response = {\r\n      results: formatted,\r\n      query: searchResult.query,\r\n      mode: searchResult.mode,\r\n      timestamp: Date.now(),\r\n      cached: false,\r\n      requestId: crypto.randomUUID(),\r\n      totalUnique: searchResult.totalUnique || formatted.length,\r\n      dedupedCount: searchResult.dedupedCount || 0\r\n    }\r\n\r\n    if (debug) {\r\n      response.sliceBreakdown = searchResult.sliceBreakdown\r\n      response.ledgerState = this.ledger.getDiagnostics()\r\n    }\r\n\r\n    return response\r\n  }\r\n}\r\n", "/**\r\n * Input validation and sanitization utilities for Jack Portal\r\n */\r\n\r\n/**\r\n * Sanitizes a string by removing potentially dangerous characters\r\n * @param {string} input - The input string to sanitize\r\n * @returns {string} - The sanitized string\r\n */\r\nexport function sanitizeString(input) {\r\n  if (typeof input !== 'string') return ''\r\n\r\n  return input\r\n    .trim()\r\n    .replace(/[<>\\\"'&]/g, '') // Remove HTML/XML injection characters\r\n    .replace(/[\\x00-\\x1F\\x7F]/g, '') // Remove control characters\r\n    .substring(0, 500) // Limit length to prevent abuse\r\n}\r\n\r\n/**\r\n * Validates and sanitizes search query\r\n * @param {string} query - The search query\r\n * @returns {Object} - {isValid: boolean, value: string, error?: string}\r\n */\r\nexport function validateQuery(query) {\r\n  if (!query || typeof query !== 'string') {\r\n    return { isValid: false, value: '', error: 'Query parameter is required' }\r\n  }\r\n\r\n  const sanitized = sanitizeString(query)\r\n\r\n  if (sanitized.length === 0) {\r\n    return { isValid: false, value: '', error: 'Query cannot be empty after sanitization' }\r\n  }\r\n\r\n  if (sanitized.length < 2) {\r\n    return { isValid: false, value: '', error: 'Query must be at least 2 characters long' }\r\n  }\r\n\r\n  if (sanitized.length > 200) {\r\n    return { isValid: false, value: '', error: 'Query cannot exceed 200 characters' }\r\n  }\r\n\r\n  return { isValid: true, value: sanitized }\r\n}\r\n\r\n/**\r\n * Validates mode parameter\r\n * @param {string} mode - The mode parameter\r\n * @returns {Object} - {isValid: boolean, value: string}\r\n */\r\nexport function validateMode(mode) {\r\n  const allowedModes = ['normal', 'deep_niche']\r\n  const sanitized = sanitizeString(mode || 'normal')\r\n\r\n  // Handle legacy 'niche' mode by converting to 'normal'\r\n  if (sanitized === 'niche') {\r\n    return { isValid: true, value: 'normal' }\r\n  }\r\n\r\n  if (!allowedModes.includes(sanitized)) {\r\n    return { isValid: true, value: 'normal' } // Default to normal if invalid\r\n  }\r\n\r\n  return { isValid: true, value: sanitized }\r\n}\r\n\r\n/**\r\n * Validates fresh parameter (time range)\r\n * @param {string} fresh - The fresh parameter\r\n * @returns {Object} - {isValid: boolean, value: string}\r\n */\r\nexport function validateFresh(fresh) {\r\n  const allowedFresh = ['d1', 'd7', 'd30', 'd365', 'all']\r\n  const sanitized = sanitizeString(fresh || 'd7')\r\n\r\n  if (!allowedFresh.includes(sanitized)) {\r\n    return { isValid: true, value: 'd7' } // Default to d7 if invalid\r\n  }\r\n\r\n  return { isValid: true, value: sanitized }\r\n}\r\n\r\n/**\r\n * Validates limit parameter\r\n * @param {string|number} limit - The limit parameter\r\n * @returns {Object} - {isValid: boolean, value: number}\r\n */\r\nexport function validateLimit(limit, env) {\r\n  const maxLimit = parseInt(env.MAX_LIMIT) || 20\r\n  const minLimit = parseInt(env.MIN_LIMIT) || 3\r\n  const defaultLimit = parseInt(env.DEFAULT_LIMIT) || 10\r\n\r\n  let numLimit = defaultLimit\r\n\r\n  if (typeof limit === 'string') {\r\n    numLimit = parseInt(limit, 10)\r\n  } else if (typeof limit === 'number') {\r\n    numLimit = limit\r\n  }\r\n\r\n  if (isNaN(numLimit)) {\r\n    return { isValid: true, value: defaultLimit }\r\n  }\r\n\r\n  if (numLimit < minLimit) {\r\n    return { isValid: true, value: minLimit }\r\n  }\r\n\r\n  if (numLimit > maxLimit) {\r\n    return { isValid: true, value: maxLimit }\r\n  }\r\n\r\n  return { isValid: true, value: numLimit }\r\n}\r\n\r\n/**\r\n * Validates provider parameter\r\n * @param {string} provider - The provider parameter\r\n * @returns {Object} - {isValid: boolean, value: string}\r\n */\r\nexport function validateProvider(provider) {\r\n  const allowedProviders = ['google', 'brave', 'yandex', 'adultmedia']\r\n  const sanitized = sanitizeString(provider || '')\r\n\r\n  if (sanitized && !allowedProviders.includes(sanitized)) {\r\n    return { isValid: true, value: '' } // Empty means all providers\r\n  }\r\n\r\n  return { isValid: true, value: sanitized }\r\n}\r\n\r\n/**\r\n * Validates host mode parameter\r\n * @param {string} hostMode - The host mode parameter\r\n * @returns {Object} - {isValid: boolean, value: string}\r\n */\r\nexport function validateHostMode(hostMode) {\r\n  const allowedModes = ['normal', 'strict', 'permissive']\r\n  const sanitized = sanitizeString(hostMode || 'normal')\r\n\r\n  if (!allowedModes.includes(sanitized)) {\r\n    return { isValid: true, value: 'normal' }\r\n  }\r\n\r\n  return { isValid: true, value: sanitized }\r\n}\r\n\r\n/**\r\n * Validates boolean-like parameters\r\n * @param {string} param - The parameter value\r\n * @param {boolean} defaultValue - Default value if invalid\r\n * @returns {boolean}\r\n */\r\nexport function validateBoolean(param, defaultValue = true) {\r\n  if (typeof param === 'string') {\r\n    const lower = param.toLowerCase()\r\n    if (lower === 'false' || lower === '0' || lower === 'no') {\r\n      return false\r\n    }\r\n    if (lower === 'true' || lower === '1' || lower === 'yes') {\r\n      return true\r\n    }\r\n  }\r\n\r\n  return defaultValue\r\n}\r\n\r\n/**\r\n * Validates site parameter (domain restriction)\r\n * @param {string} site - The site parameter\r\n * @returns {Object} - {isValid: boolean, value: string}\r\n */\r\nexport function validateSite(site) {\r\n  if (!site) return { isValid: true, value: '' }\r\n\r\n  const sanitized = sanitizeString(site)\r\n\r\n  // Basic domain validation regex\r\n  const domainRegex = /^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/\r\n\r\n  if (!domainRegex.test(sanitized)) {\r\n    return { isValid: false, value: '', error: 'Invalid domain format' }\r\n  }\r\n\r\n  return { isValid: true, value: sanitized }\r\n}\r\n\r\n/**\r\n * Comprehensive input validation for all request parameters\r\n * @param {URLSearchParams} params - URL search parameters\r\n * @param {Object} env - Environment variables\r\n * @returns {Object} - {isValid: boolean, data: Object, errors: Array}\r\n */\r\nexport function validateAllInputs(params, env) {\r\n  const errors = []\r\n  const data = {}\r\n\r\n  // Validate query (required)\r\n  const queryValidation = validateQuery(params.get('q'))\r\n  if (!queryValidation.isValid) {\r\n    errors.push(queryValidation.error)\r\n  }\r\n  data.query = queryValidation.value\r\n\r\n  // Validate optional parameters\r\n  data.mode = validateMode(params.get('mode')).value\r\n  data.fresh = validateFresh(params.get('fresh')).value\r\n  data.limit = validateLimit(params.get('limit'), env).value\r\n  data.provider = validateProvider(params.get('provider')).value\r\n  data.hostMode = validateHostMode(params.get('hostMode')).value\r\n\r\n  // Validate site parameter\r\n  const siteValidation = validateSite(params.get('site'))\r\n  if (!siteValidation.isValid) {\r\n    errors.push(siteValidation.error)\r\n  }\r\n  data.site = siteValidation.value\r\n\r\n  // Validate boolean parameters\r\n  data.showThumbs = validateBoolean(params.get('showThumbs'), true)\r\n  data.safeMode = validateBoolean(params.get('safeMode'), true)\r\n  data.debug = validateBoolean(params.get('debug'), false)\r\n\r\n  // Optional parameters that don't need validation\r\n  data.duration = sanitizeString(params.get('duration') || '')\r\n  data.durationMode = sanitizeString(params.get('durationMode') || 'normal')\r\n\r\n  return {\r\n    isValid: errors.length === 0,\r\n    data,\r\n    errors\r\n  }\r\n}\r\n", "/**\r\n * Response utilities for Jack Portal\r\n */\r\n\r\n/**\r\n * Creates a compressed response with appropriate headers\r\n * @param {string|Object} data - The response data\r\n * @param {Object} options - Response options\r\n * @returns {Response} - The compressed response\r\n */\r\nexport function createCompressedResponse(data, options = {}) {\r\n  const {\r\n    status = 200,\r\n    headers = {},\r\n    compress = true\r\n  } = options\r\n\r\n  // Convert data to JSON string if it's an object\r\n  const jsonString = typeof data === 'string' ? data : JSON.stringify(data)\r\n\r\n  // Set default headers\r\n  const responseHeaders = {\r\n    'Content-Type': 'application/json',\r\n    'X-Content-Encoding': 'gzip',\r\n    'X-Compressed-By': 'Jack-Portal',\r\n    ...headers\r\n  }\r\n\r\n  // Add compression headers if enabled\r\n  if (compress) {\r\n    responseHeaders['Content-Encoding'] = 'gzip'\r\n    responseHeaders['Vary'] = 'Accept-Encoding'\r\n  }\r\n\r\n  return new Response(jsonString, {\r\n    status,\r\n    headers: responseHeaders\r\n  })\r\n}\r\n\r\n/**\r\n * Creates a CORS-enabled response\r\n * @param {string|Object} data - The response data\r\n * @param {Object} options - Response options\r\n * @returns {Response} - The CORS-enabled response\r\n */\r\nexport function createCORSResponse(data, options = {}) {\r\n  const {\r\n    status = 200,\r\n    headers = {},\r\n    origin = '*',\r\n    methods = 'GET, POST, OPTIONS',\r\n    credentials = false\r\n  } = options\r\n\r\n  const corsHeaders = {\r\n    'Access-Control-Allow-Origin': origin,\r\n    'Access-Control-Allow-Methods': methods,\r\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With',\r\n    'Access-Control-Max-Age': '86400', // 24 hours\r\n    ...headers\r\n  }\r\n\r\n  if (credentials) {\r\n    corsHeaders['Access-Control-Allow-Credentials'] = 'true'\r\n  }\r\n\r\n  return createCompressedResponse(data, {\r\n    ...options,\r\n    status,\r\n    headers: corsHeaders\r\n  })\r\n}\r\n\r\n/**\r\n * Creates an error response with proper formatting\r\n * @param {string} message - Error message\r\n * @param {number} status - HTTP status code\r\n * @param {Object} details - Additional error details\r\n * @returns {Response} - The error response\r\n */\r\nexport function createErrorResponse(message, status = 500, details = {}) {\r\n  const errorData = {\r\n    error: message,\r\n    status,\r\n    timestamp: new Date().toISOString(),\r\n    requestId: crypto.randomUUID(),\r\n    ...details\r\n  }\r\n\r\n  return createCORSResponse(errorData, {\r\n    status,\r\n    headers: {\r\n      'X-Error-Type': details.type || 'ApplicationError',\r\n      'X-Request-ID': errorData.requestId\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Creates a success response with metadata\r\n * @param {Object} data - The response data\r\n * @param {Object} metadata - Additional metadata\r\n * @returns {Response} - The success response\r\n */\r\nexport function createSuccessResponse(data, metadata = {}) {\r\n  const responseData = {\r\n    ...data,\r\n    metadata: {\r\n      timestamp: new Date().toISOString(),\r\n      requestId: crypto.randomUUID(),\r\n      ...metadata\r\n    }\r\n  }\r\n\r\n  return createCORSResponse(responseData, {\r\n    headers: {\r\n      'X-Request-ID': responseData.metadata.requestId,\r\n      'X-Response-Type': 'Success'\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Handles OPTIONS requests for CORS preflight\r\n * @param {Request} request - The incoming request\r\n * @returns {Response} - The preflight response\r\n */\r\nexport function handleOptionsRequest(request) {\r\n  const origin = request.headers.get('Origin') || '*'\r\n\r\n  return new Response(null, {\r\n    status: 204,\r\n    headers: {\r\n      'Access-Control-Allow-Origin': origin,\r\n      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\r\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With',\r\n      'Access-Control-Max-Age': '86400',\r\n      'X-Preflight-Allowed': 'true'\r\n    }\r\n  })\r\n}\r\n", "/**\r\n * Rate limiting utilities for Jack Portal\r\n */\r\n\r\n/**\r\n * Rate limit configuration\r\n */\r\nconst RATE_LIMITS = {\r\n  // Per IP limits\r\n  ip: {\r\n    window: 60, // 1 minute\r\n    maxRequests: 10 // 10 requests per minute\r\n  },\r\n  // Per endpoint limits\r\n  endpoint: {\r\n    window: 60,\r\n    maxRequests: 30\r\n  },\r\n  // Global limits\r\n  global: {\r\n    window: 60,\r\n    maxRequests: 100\r\n  }\r\n}\r\n\r\n/**\r\n * Generates a rate limit key\r\n * @param {string} type - Type of rate limit (ip, endpoint, global)\r\n * @param {string} identifier - Identifier for the limit (IP, endpoint, etc.)\r\n * @returns {string} - The rate limit key\r\n */\r\nfunction generateRateLimitKey(type, identifier) {\r\n  return `ratelimit:${type}:${identifier}:${Math.floor(Date.now() / (RATE_LIMITS[type].window * 1000))}`\r\n}\r\n\r\n/**\r\n * Checks if a request exceeds rate limits\r\n * @param {Object} env - Environment variables\r\n * @param {string} ip - Client IP address\r\n * @param {string} endpoint - API endpoint\r\n * @returns {Promise<Object>} - {allowed: boolean, remaining: number, resetTime: number}\r\n */\r\nexport async function checkRateLimit(env, ip, endpoint = 'search') {\r\n  try {\r\n    const now = Date.now()\r\n    const results = await Promise.all([\r\n      // Check IP-based rate limit\r\n      checkSpecificRateLimit(env, 'ip', ip),\r\n      // Check endpoint-based rate limit\r\n      checkSpecificRateLimit(env, 'endpoint', endpoint),\r\n      // Check global rate limit\r\n      checkSpecificRateLimit(env, 'global', 'global')\r\n    ])\r\n\r\n    const ipResult = results[0]\r\n    const endpointResult = results[1]\r\n    const globalResult = results[2]\r\n\r\n    // If any limit is exceeded, deny the request\r\n    if (!ipResult.allowed || !endpointResult.allowed || !globalResult.allowed) {\r\n      return {\r\n        allowed: false,\r\n        remaining: Math.min(ipResult.remaining, endpointResult.remaining, globalResult.remaining),\r\n        resetTime: Math.max(ipResult.resetTime, endpointResult.resetTime, globalResult.resetTime),\r\n        exceeded: {\r\n          ip: !ipResult.allowed,\r\n          endpoint: !endpointResult.allowed,\r\n          global: !globalResult.allowed\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      allowed: true,\r\n      remaining: Math.min(ipResult.remaining, endpointResult.remaining, globalResult.remaining),\r\n      resetTime: Math.min(ipResult.resetTime, endpointResult.resetTime, globalResult.resetTime)\r\n    }\r\n\r\n  } catch (error) {\r\n    console.warn('Rate limit check error:', error)\r\n    // Allow request on error to avoid blocking legitimate traffic\r\n    return {\r\n      allowed: true,\r\n      remaining: 999,\r\n      resetTime: now + 60000\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Checks a specific rate limit\r\n * @param {Object} env - Environment variables\r\n * @param {string} type - Type of rate limit\r\n * @param {string} identifier - Identifier for the limit\r\n * @returns {Promise<Object>} - {allowed: boolean, remaining: number, resetTime: number}\r\n */\r\nasync function checkSpecificRateLimit(env, type, identifier) {\r\n  const key = generateRateLimitKey(type, identifier)\r\n  const config = RATE_LIMITS[type]\r\n  const now = Date.now()\r\n  const windowStart = Math.floor(now / (config.window * 1000)) * (config.window * 1000)\r\n  const resetTime = windowStart + (config.window * 1000)\r\n\r\n  try {\r\n    // Get current count\r\n    const currentCount = parseInt(await env.CACHE.get(key)) || 0\r\n\r\n    if (currentCount >= config.maxRequests) {\r\n      return {\r\n        allowed: false,\r\n        remaining: 0,\r\n        resetTime\r\n      }\r\n    }\r\n\r\n    // Increment count\r\n    const newCount = currentCount + 1\r\n    await env.CACHE.put(key, newCount.toString(), {\r\n      expirationTtl: config.window\r\n    })\r\n\r\n    return {\r\n      allowed: true,\r\n      remaining: config.maxRequests - newCount,\r\n      resetTime\r\n    }\r\n\r\n  } catch (error) {\r\n    console.warn(`Rate limit error for ${type}:${identifier}:`, error)\r\n    // Allow request on error\r\n    return {\r\n      allowed: true,\r\n      remaining: 999,\r\n      resetTime: now + 60000\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Creates a rate limit exceeded response\r\n * @param {Object} rateLimitInfo - Rate limit information\r\n * @returns {Response} - The rate limit response\r\n */\r\nexport function createRateLimitResponse(rateLimitInfo) {\r\n  const resetDate = new Date(rateLimitInfo.resetTime)\r\n\r\n  return new Response(JSON.stringify({\r\n    error: 'Rate limit exceeded',\r\n    message: 'Too many requests. Please try again later.',\r\n    retryAfter: Math.ceil((rateLimitInfo.resetTime - Date.now()) / 1000),\r\n    resetTime: resetDate.toISOString(),\r\n    limits: rateLimitInfo.exceeded,\r\n    status: 429\r\n  }), {\r\n    status: 429,\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'X-Rate-Limit-Remaining': rateLimitInfo.remaining.toString(),\r\n      'X-Rate-Limit-Reset': resetDate.toISOString(),\r\n      'X-Rate-Limit-Retry-After': Math.ceil((rateLimitInfo.resetTime - Date.now()) / 1000).toString(),\r\n      'Retry-After': Math.ceil((rateLimitInfo.resetTime - Date.now()) / 1000).toString()\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Middleware function for rate limiting\r\n * @param {Request} request - The incoming request\r\n * @param {Object} env - Environment variables\r\n * @param {Function} next - Next middleware function\r\n * @returns {Response} - The response or rate limit response\r\n */\r\nexport async function rateLimitMiddleware(request, env, next) {\r\n  const url = new URL(request.url)\r\n  const ip = request.headers.get('CF-Connecting-IP') ||\r\n             request.headers.get('X-Forwarded-For') ||\r\n             request.headers.get('X-Real-IP') ||\r\n             'unknown'\r\n\r\n  const endpoint = url.pathname.replace('/api/', '').replace('/', '') || 'search'\r\n\r\n  const rateLimitResult = await checkRateLimit(env, ip, endpoint)\r\n\r\n  if (!rateLimitResult.allowed) {\r\n    console.warn('Rate limit exceeded:', {\r\n      ip,\r\n      endpoint,\r\n      remaining: rateLimitResult.remaining,\r\n      resetTime: new Date(rateLimitResult.resetTime).toISOString()\r\n    })\r\n\r\n    return createRateLimitResponse(rateLimitResult)\r\n  }\r\n\r\n  // Add rate limit headers to successful requests\r\n  const response = await next()\r\n  const resetDate = new Date(rateLimitResult.resetTime)\r\n\r\n  // Clone the response to add headers\r\n  const newResponse = new Response(response.body, response)\r\n  newResponse.headers.set('X-Rate-Limit-Remaining', rateLimitResult.remaining.toString())\r\n  newResponse.headers.set('X-Rate-Limit-Reset', resetDate.toISOString())\r\n\r\n  return newResponse\r\n}\r\n", "/**\r\n * Aggregate Search Handler\r\n * Handles search requests across multiple providers with caching\r\n     const response = {\r\n      results: results.results,\r\n      query,\r\n      mode,\r\n      timestamp: Date.now(),\r\n      cached: false,\r\n      requestId: crypto.randomUUID(),\r\n      totalUnique: results.totalUnique,\r\n      dedupedCount: results.dedupedCount,\r\n      ...(debug && results.providerBreakdown && { providerBreakdown: results.providerBreakdown }),\r\n      ...(debug && results.ledgerState && { ledgerState: results.ledgerState })\r\n    }e handlers/aggregate\r\n */\r\n\r\nimport { SearchService } from '../lib/search-service.js'\r\nimport { validateAllInputs } from '../lib/validation.js'\r\nimport { createCORSResponse, createErrorResponse, createSuccessResponse } from '../lib/response.js'\r\nimport { checkRateLimit, createRateLimitResponse } from '../lib/rate-limit.js'\r\n\r\n/**\r\n * Handles aggregate search requests\r\n * @param {Request} request - The incoming HTTP request\r\n * @param {Object} env - Environment variables and Cloudflare bindings\r\n * @returns {Promise<Response>} The search results response\r\n */\r\nexport async function handleAggregate(request, env) {\r\n  const url = new URL(request.url)\r\n  const ip = request.headers.get('CF-Connecting-IP') ||\r\n             request.headers.get('X-Forwarded-For') ||\r\n             request.headers.get('X-Real-IP') ||\r\n             'unknown'\r\n\r\n  // Check rate limits\r\n  const rateLimitResult = await checkRateLimit(env, ip, 'aggregate')\r\n  if (!rateLimitResult.allowed) {\r\n    console.warn('Rate limit exceeded for IP:', ip)\r\n    return createRateLimitResponse(rateLimitResult)\r\n  }\r\n\r\n  // Comprehensive input validation\r\n  const validation = validateAllInputs(url.searchParams, env)\r\n\r\n  if (!validation.isValid) {\r\n    console.warn('Input validation failed:', validation.errors)\r\n    return createErrorResponse(\r\n      'Invalid input parameters',\r\n      400,\r\n      {\r\n        details: validation.errors,\r\n        type: 'ValidationError'\r\n      }\r\n    )\r\n  }\r\n\r\n  const {\r\n    query,\r\n    mode,\r\n    fresh,\r\n    limit,\r\n    duration,\r\n    site,\r\n    hostMode,\r\n    durationMode,\r\n    showThumbs,\r\n    provider,\r\n    safeMode,\r\n    debug\r\n  } = validation.data\r\n\r\n  // Create cache key with validated parameters (without timestamp to enable proper caching)\r\n  const cacheKey = `search:${query}:${mode}:${fresh}:${limit}:${provider || 'all'}:${safeMode}:${debug || false}`\r\n\r\n  // Try to get from cache first\r\n  try {\r\n    const cachedResult = await env.CACHE.get(cacheKey)\r\n    if (cachedResult) {\r\n      console.log('Cache hit for query:', query, 'from IP:', ip)\r\n      const cachedData = JSON.parse(cachedResult)\r\n      return createSuccessResponse(cachedData, {\r\n        cacheStatus: 'HIT',\r\n        validationStatus: 'PASSED'\r\n      })\r\n    }\r\n  } catch (cacheError) {\r\n    console.warn('Cache read error for query:', query, 'Error:', cacheError.message)\r\n  }\r\n\r\n  console.log('Cache miss for query:', query, 'from IP:', ip)\r\n\r\n  try {\r\n    const searchService = new SearchService(env)\r\n\r\n    // Perform the search\r\n    const results = await searchService.search({\r\n      query,\r\n      mode,\r\n      fresh,\r\n      limit,\r\n      duration,\r\n      site,\r\n      hostMode,\r\n      durationMode,\r\n      showThumbs,\r\n      provider,\r\n      safeMode,\r\n      debug,\r\n      ip\r\n    })\r\n\r\n    const response = {\r\n      results,\r\n      query,\r\n      mode,\r\n      timestamp: Date.now(),\r\n      cached: false,\r\n      requestId: crypto.randomUUID(),\r\n      totalUnique: results.totalUnique,\r\n      dedupedCount: results.dedupedCount,\r\n      ...(debug && results.providerBreakdown && { providerBreakdown: results.providerBreakdown }),\r\n      ...(debug && results.ledgerState && { ledgerState: results.ledgerState })\r\n    }\r\n\r\n    // Cache the result for 30 minutes (1800 seconds)\r\n    try {\r\n      await env.CACHE.put(cacheKey, JSON.stringify(response), {\r\n        expirationTtl: 1800 // 30 minutes\r\n      })\r\n      console.log('Cached result for query:', query, 'TTL: 1800s')\r\n    } catch (cacheWriteError) {\r\n      console.warn('Cache write error for query:', query, 'Error:', cacheWriteError.message)\r\n    }\r\n\r\n    return createSuccessResponse(response, {\r\n      cacheStatus: 'MISS',\r\n      validationStatus: 'PASSED'\r\n    })\r\n\r\n  } catch (error) {\r\n    const requestId = crypto.randomUUID()\r\n    console.error('Search error:', {\r\n      requestId,\r\n      query,\r\n      ip,\r\n      mode,\r\n      provider,\r\n      error: error.message,\r\n      stack: error.stack,\r\n      timestamp: new Date().toISOString()\r\n    })\r\n\r\n    return createErrorResponse(\r\n      'Search failed',\r\n      500,\r\n      {\r\n        message: error.message,\r\n        type: error.name || 'SearchError',\r\n        requestId\r\n      }\r\n    )\r\n  }\r\n}\r\n", "/**\r\n * Diagnostics Handler\r\n * Provides monitoring and health information for providers\r\n */\r\n\r\nimport { ProviderLedger } from '../lib/provider-ledger.js'\r\nimport { AdapterRegistry } from '../lib/adapter-registry.js'\r\nimport { createSuccessResponse } from '../lib/response.js'\r\n\r\n/**\r\n * Handles diagnostics requests\r\n * @param {Request} request - The incoming HTTP request\r\n * @param {Object} env - Environment variables and Cloudflare bindings\r\n * @returns {Promise<Response>} The diagnostics response\r\n */\r\nexport async function handleDiagnostics(request, env) {\r\n  try {\r\n    const url = new URL(request.url)\r\n    const provider = url.searchParams.get('provider')\r\n\r\n    // Initialize provider ledger\r\n    const ledger = new ProviderLedger(env)\r\n    await ledger.loadStates()\r\n\r\n    // Initialize adapter registry for metadata\r\n    const registry = new AdapterRegistry()\r\n    // Note: Registry is populated in SearchService constructor\r\n\r\n    let diagnostics\r\n\r\n    if (provider) {\r\n      // Single provider diagnostics\r\n      diagnostics = {\r\n        provider: ledger.getProviderState(provider),\r\n        registry: registry.getMetadata(provider),\r\n        ledger_state: ledger.getDiagnostics(provider)\r\n      }\r\n    } else {\r\n      // All providers diagnostics\r\n      diagnostics = {\r\n        providers: ledger.getDiagnostics(),\r\n        registry: registry.getAllMetadata(),\r\n        system: {\r\n          timestamp: new Date().toISOString(),\r\n          version: '2.1.0',\r\n          environment: env.ENVIRONMENT || 'development'\r\n        },\r\n        cache: {\r\n          status: env.CACHE ? 'available' : 'unavailable'\r\n        },\r\n        provider_ledger: {\r\n          status: env.PROVIDER_LEDGER ? 'available' : 'unavailable'\r\n        },\r\n        alerts: _computeAlertFlags(ledger.getDiagnostics())\r\n      }\r\n    }\r\n\r\n    return createSuccessResponse(diagnostics, {\r\n      cacheStatus: 'BYPASS'\r\n    })\r\n\r\n  } catch (error) {\r\n    console.error('Diagnostics error:', error)\r\n    return createSuccessResponse({\r\n      error: 'Diagnostics unavailable',\r\n      timestamp: new Date().toISOString()\r\n    }, {\r\n      cacheStatus: 'BYPASS'\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Compute alert flags for monitoring\r\n */\r\nfunction _computeAlertFlags(providerStates) {\r\n  const now = Date.now()\r\n  const tenMinutesAgo = now - (10 * 60 * 1000)\r\n\r\n  // Check Google quota stale alert\r\n  const googleState = providerStates.google\r\n  const googleQuotaStale = googleState &&\r\n    googleState.status === 'QUOTA_EXCEEDED' &&\r\n    googleState.resetAt &&\r\n    now > new Date(googleState.resetAt).getTime()\r\n\r\n  // Calculate system-wide fallback rate\r\n  let totalRequests = 0\r\n  let fallbackRequests = 0\r\n\r\n  for (const [providerName, state] of Object.entries(providerStates)) {\r\n    if (providerName === 'google') continue // Skip primary provider\r\n\r\n    const providerRequests = (state.rolling?.successCount || 0) +\r\n                            (state.rolling?.timeoutCount || 0) +\r\n                            (state.rolling?.error4xxCount || 0) +\r\n                            (state.rolling?.error5xxCount || 0)\r\n\r\n    totalRequests += providerRequests\r\n\r\n    // Consider requests to non-Google providers as fallbacks\r\n    if (providerName !== 'google') {\r\n      fallbackRequests += providerRequests\r\n    }\r\n  }\r\n\r\n  const fallbackRate = totalRequests > 0 ? (fallbackRequests / totalRequests) * 100 : 0\r\n  const fallbackRateHigh = fallbackRate > 15\r\n\r\n  return {\r\n    google_quota_stale: googleQuotaStale || false,\r\n    fallback_rate_high: fallbackRateHigh,\r\n    fallback_rate_percent: fallbackRate.toFixed(1),\r\n    last_checked: new Date().toISOString()\r\n  }\r\n}\r\n", "/**\r\n * Logging utilities for Jack Portal\r\n */\r\n\r\n/**\r\n * Log levels\r\n */\r\nexport const LOG_LEVELS = {\r\n  ERROR: 0,\r\n  WARN: 1,\r\n  INFO: 2,\r\n  DEBUG: 3\r\n}\r\n\r\n/**\r\n * Current log level (can be set via environment variable)\r\n */\r\nlet currentLogLevel = LOG_LEVELS.INFO\r\n\r\n/**\r\n * Initialize log level from environment\r\n * @param {Object} env - Environment variables\r\n */\r\nexport function initLogLevel(env) {\r\n  if (env.LOG_LEVEL) {\r\n    const envLogLevel = parseInt(env.LOG_LEVEL)\r\n    if (!isNaN(envLogLevel) && envLogLevel >= 0 && envLogLevel <= 3) {\r\n      currentLogLevel = envLogLevel\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Sets the current log level\r\n * @param {string|number} level - Log level string or number\r\n */\r\nexport function setLogLevel(level) {\r\n  if (typeof level === 'string') {\r\n    const upperLevel = level.toUpperCase()\r\n    if (LOG_LEVELS[upperLevel] !== undefined) {\r\n      currentLogLevel = LOG_LEVELS[upperLevel]\r\n    }\r\n  } else if (typeof level === 'number') {\r\n    if (level >= 0 && level <= 3) {\r\n      currentLogLevel = level\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Formats a log entry\r\n * @param {string} level - Log level\r\n * @param {string} message - Log message\r\n * @param {Object} data - Additional data\r\n * @returns {Object} - Formatted log entry\r\n */\r\nfunction formatLogEntry(level, message, data = {}) {\r\n  return {\r\n    timestamp: new Date().toISOString(),\r\n    level,\r\n    message,\r\n    ...data,\r\n    service: 'jack-portal',\r\n    version: '2.0.0'\r\n  }\r\n}\r\n\r\n/**\r\n * Logs an error message\r\n * @param {string} message - Error message\r\n * @param {Object} data - Additional error data\r\n */\r\nexport function logError(message, data = {}) {\r\n  if (currentLogLevel >= LOG_LEVELS.ERROR) {\r\n    const logEntry = formatLogEntry('ERROR', message, data)\r\n    console.error(JSON.stringify(logEntry))\r\n  }\r\n}\r\n\r\n/**\r\n * Logs a warning message\r\n * @param {string} message - Warning message\r\n * @param {Object} data - Additional warning data\r\n */\r\nexport function logWarn(message, data = {}) {\r\n  if (currentLogLevel >= LOG_LEVELS.WARN) {\r\n    const logEntry = formatLogEntry('WARN', message, data)\r\n    console.warn(JSON.stringify(logEntry))\r\n  }\r\n}\r\n\r\n/**\r\n * Logs an info message\r\n * @param {string} message - Info message\r\n * @param {Object} data - Additional info data\r\n */\r\nexport function logInfo(message, data = {}) {\r\n  if (currentLogLevel >= LOG_LEVELS.INFO) {\r\n    const logEntry = formatLogEntry('INFO', message, data)\r\n    console.log(JSON.stringify(logEntry))\r\n  }\r\n}\r\n\r\n/**\r\n * Logs a debug message\r\n * @param {string} message - Debug message\r\n * @param {Object} data - Additional debug data\r\n */\r\nexport function logDebug(message, data = {}) {\r\n  if (currentLogLevel >= LOG_LEVELS.DEBUG) {\r\n    const logEntry = formatLogEntry('DEBUG', message, data)\r\n    console.debug(JSON.stringify(logEntry))\r\n  }\r\n}\r\n\r\n/**\r\n * Logs request metrics\r\n * @param {Object} metrics - Request metrics\r\n */\r\nexport function logRequestMetrics(metrics) {\r\n  logInfo('Request completed', {\r\n    type: 'request_metrics',\r\n    ...metrics\r\n  })\r\n}\r\n\r\n/**\r\n * Logs API provider performance\r\n * @param {string} provider - API provider name\r\n * @param {Object} metrics - Provider metrics\r\n */\r\nexport function logProviderMetrics(provider, metrics) {\r\n  logInfo('Provider performance', {\r\n    type: 'provider_metrics',\r\n    provider,\r\n    ...metrics\r\n  })\r\n}\r\n\r\n/**\r\n * Logs cache performance\r\n * @param {Object} metrics - Cache metrics\r\n */\r\nexport function logCacheMetrics(metrics) {\r\n  logDebug('Cache operation', {\r\n    type: 'cache_metrics',\r\n    ...metrics\r\n  })\r\n}\r\n\r\n/**\r\n * Logs rate limiting events\r\n * @param {Object} event - Rate limiting event data\r\n */\r\nexport function logRateLimitEvent(event) {\r\n  logWarn('Rate limit event', {\r\n    type: 'rate_limit',\r\n    ...event\r\n  })\r\n}\r\n\r\n/**\r\n * Logs validation errors\r\n * @param {Array} errors - Validation errors\r\n * @param {Object} context - Validation context\r\n */\r\nexport function logValidationErrors(errors, context = {}) {\r\n  logWarn('Validation failed', {\r\n    type: 'validation_error',\r\n    errors,\r\n    ...context\r\n  })\r\n}\r\n\r\n/**\r\n * Creates a request context for logging\r\n * @param {Request} request - The incoming request\r\n * @returns {Object} - Request context\r\n */\r\nexport function createRequestContext(request) {\r\n  const url = new URL(request.url)\r\n\r\n  return {\r\n    requestId: crypto.randomUUID(),\r\n    method: request.method,\r\n    path: url.pathname,\r\n    query: url.search,\r\n    ip: request.headers.get('CF-Connecting-IP') ||\r\n        request.headers.get('X-Forwarded-For') ||\r\n        request.headers.get('X-Real-IP') ||\r\n        'unknown',\r\n    userAgent: request.headers.get('User-Agent'),\r\n    referer: request.headers.get('Referer'),\r\n    origin: request.headers.get('Origin')\r\n  }\r\n}\r\n\r\n/**\r\n * Logs the start of a request\r\n * @param {Object} context - Request context\r\n */\r\nexport function logRequestStart(context) {\r\n  logInfo('Request started', {\r\n    type: 'request_start',\r\n    ...context\r\n  })\r\n}\r\n\r\n/**\r\n * Logs the end of a request\r\n * @param {Object} context - Request context\r\n * @param {number} duration - Request duration in ms\r\n * @param {number} status - Response status code\r\n */\r\nexport function logRequestEnd(context, duration, status) {\r\n  logInfo('Request completed', {\r\n    type: 'request_end',\r\n    duration,\r\n    status,\r\n    ...context\r\n  })\r\n}\r\n\r\n/**\r\n * Logs an error with full context\r\n * @param {Error} error - The error object\r\n * @param {Object} context - Request context\r\n */\r\nexport function logErrorWithContext(error, context = {}) {\r\n  logError('Application error', {\r\n    type: 'application_error',\r\n    error: error.message,\r\n    stack: error.stack,\r\n    ...context\r\n  })\r\n}\r\n", "/**\r\n * Health Check Handler\r\n * Provides system health status and basic diagnostics\r\n */\r\n\r\nimport { createSuccessResponse, createErrorResponse } from '../lib/response.js'\r\nimport { logInfo } from '../lib/logger.js'\r\n\r\n/**\r\n * Handle health check requests\r\n * @param {Request} request - The incoming HTTP request\r\n * @param {Object} env - Environment variables and bindings\r\n * @returns {Promise<Response>} Health status response\r\n */\r\nexport async function handleHealth(request, env) {\r\n  try {\r\n    const url = new URL(request.url)\r\n    const timestamp = new Date().toISOString()\r\n\r\n    // Basic health check data\r\n    const healthData = {\r\n      status: 'healthy',\r\n      timestamp,\r\n      version: '2.0.0',\r\n      uptime: null, // Not available in Cloudflare Workers\r\n      environment: {\r\n        node_version: 'Cloudflare Worker',\r\n        platform: 'cloudflare'\r\n      },\r\n      endpoints: {\r\n        search: '/api/search',\r\n        diagnostics: '/api/diagnostics?debug=true'\r\n      }\r\n    }\r\n\r\n    // Check if KV namespace is available (basic connectivity test)\r\n    if (env.PROVIDER_LEDGER) {\r\n      try {\r\n        // Simple KV test - try to get a non-existent key\r\n        await env.PROVIDER_LEDGER.get('health-check-test')\r\n        healthData.kv_status = 'connected'\r\n      } catch (kvError) {\r\n        healthData.kv_status = 'error'\r\n        healthData.kv_error = kvError.message\r\n        healthData.status = 'degraded'\r\n      }\r\n    } else {\r\n      healthData.kv_status = 'not_configured'\r\n    }\r\n\r\n    // Log health check\r\n    logInfo('Health check performed', {\r\n      status: healthData.status,\r\n      kv_status: healthData.kv_status,\r\n      timestamp\r\n    })\r\n\r\n    // Return appropriate status code based on health\r\n    const statusCode = healthData.status === 'healthy' ? 200 : 503\r\n\r\n    return createSuccessResponse(healthData, statusCode)\r\n\r\n  } catch (error) {\r\n    logInfo('Health check failed', {\r\n      error: error.message,\r\n      timestamp: new Date().toISOString()\r\n    })\r\n\r\n    return createErrorResponse(\r\n      'Health check failed',\r\n      503,\r\n      {\r\n        error: error.message,\r\n        timestamp: new Date().toISOString()\r\n      }\r\n    )\r\n  }\r\n}", "/**\r\n * Provider Self-Test Handler\r\n * Comprehensive health check across all providers with detailed diagnostics\r\n */\r\n\r\nimport {\r\n  GoogleProvider,\r\n  SerpApiProvider,\r\n  SerperProvider,\r\n  YandexProvider,\r\n  BraveProvider,\r\n  SerpHouseProvider,\r\n  AdultMediaProvider,\r\n  QualityPornProvider,\r\n  ApifyProvider,\r\n  ScrapersProvider,\r\n  AdaptersProvider\r\n  // SeznamProvider // Disabled - API endpoint doesn't exist\r\n} from '../lib/sources/index.js'\r\nimport { ProviderLedger } from '../lib/provider-ledger.js'\r\nimport { createSuccessResponse, createErrorResponse } from '../lib/response.js'\r\nimport { logInfo } from '../lib/logger.js'\r\n\r\n/**\r\n * Canonical error codes for provider testing\r\n */\r\nconst ERROR_CODES = {\r\n  INVALID_AUTH: 'INVALID_AUTH',\r\n  BAD_HOST: 'BAD_HOST',\r\n  BAD_PARAMS: 'BAD_PARAMS',\r\n  TIMEOUT: 'TIMEOUT',\r\n  RATE_LIMIT: 'RATE_LIMIT',\r\n  UPSTREAM_ERROR: 'UPSTREAM_ERROR',\r\n  NETWORK_ERROR: 'NETWORK_ERROR',\r\n  QUOTA_EXCEEDED_DAILY: 'QUOTA_EXCEEDED_DAILY',\r\n  QUOTA_EXCEEDED_MONTHLY: 'QUOTA_EXCEEDED_MONTHLY',\r\n  UNKNOWN: 'UNKNOWN'\r\n}\r\n\r\n/**\r\n * Provider configuration requirements\r\n */\r\nconst PROVIDER_CONFIGS = {\r\n  google: {\r\n    required: ['GOOGLE_API_KEY', 'GOOGLE_CSE_ID'],\r\n    headers: [],\r\n    queryParams: ['key', 'cx']\r\n  },\r\n  serpapi: {\r\n    required: ['SERPAPI_KEY'],\r\n    headers: [],\r\n    queryParams: ['api_key']\r\n  },\r\n  serper: {\r\n    required: ['SERPER_KEY'],\r\n    headers: ['X-API-KEY'],\r\n    queryParams: []\r\n  },\r\n  yandex: {\r\n    required: ['SERPWOW_API_KEY'],\r\n    headers: [],\r\n    queryParams: ['api_key']\r\n  },\r\n  brave: {\r\n    required: ['BRAVE_API_KEY'],\r\n    headers: ['X-Subscription-Token'],\r\n    queryParams: []\r\n  },\r\n  serphouse: {\r\n    required: ['SERPHOUSE_KEY'],\r\n    headers: [],\r\n    queryParams: ['api_token', 'q', 'num_results', 'domain', 'lang', 'device', 'serp_type']\r\n  },\r\n  adultmedia: {\r\n    required: ['ADULTMEDIA_API_KEY', 'RAPIDAPI_KEY'],\r\n    headers: ['x-rapidapi-key', 'x-rapidapi-host'],\r\n    queryParams: ['q', 'limit']\r\n  },\r\n  qualityporn: {\r\n    required: ['RAPIDAPI_KEY'],\r\n    headers: ['x-rapidapi-key', 'x-rapidapi-host'],\r\n    queryParams: []\r\n  },\r\n  // seznam: { // Disabled - API endpoint doesn't exist\r\n  //   required: ['RAPIDAPI_KEY'],\r\n  //   headers: ['x-rapidapi-key', 'x-rapidapi-host'],\r\n  //   queryParams: ['q', 'count', 'format', 'lang']\r\n  // },\r\n  apify: {\r\n    required: ['APIFY_TOKEN'],\r\n    headers: [],\r\n    queryParams: []\r\n  },\r\n  scrapers: {\r\n    required: ['SCRAPERS_API_KEY'],\r\n    headers: ['Authorization'],\r\n    queryParams: []\r\n  },\r\n  adapters: {\r\n    required: ['ADAPTERS_API_KEY'],\r\n    headers: ['Authorization'],\r\n    queryParams: []\r\n  }\r\n}\r\n\r\n/**\r\n * Handle provider self-test requests\r\n * @param {Request} request - The incoming HTTP request\r\n * @param {Object} env - Environment variables and bindings\r\n * @returns {Promise<Response>} The self-test response\r\n */\r\nexport async function handleProviderSelfTest(request, env) {\r\n  const url = new URL(request.url)\r\n  const debug = url.searchParams.get('debug') === 'true'\r\n  const diagToken = request.headers.get('X-Diag-Token')\r\n\r\n  // Security check - require DEBUG mode or X-Diag-Token\r\n  if (!debug && !diagToken) {\r\n    return createErrorResponse(\r\n      'Provider self-test requires DEBUG mode or X-Diag-Token header',\r\n      403,\r\n      {\r\n        type: 'SecurityError',\r\n        required: 'debug=true or X-Diag-Token header'\r\n      }\r\n    )\r\n  }\r\n\r\n  try {\r\n    logInfo('Starting provider self-test', {\r\n      debug,\r\n      hasDiagToken: !!diagToken,\r\n      timestamp: new Date().toISOString()\r\n    })\r\n\r\n    // Initialize provider instances\r\n    const providers = createProviderInstances()\r\n\r\n    // Run comprehensive health check\r\n    const results = await runProviderHealthCheck(providers, env, debug)\r\n\r\n    // Generate consolidated report\r\n    const report = generateConsolidatedReport(results)\r\n\r\n    logInfo('Provider self-test completed', {\r\n      totalProviders: Object.keys(results).length,\r\n      healthyCount: Object.values(results).filter(r => r.status === 'ok').length,\r\n      failedCount: Object.values(results).filter(r => r.status === 'fail').length,\r\n      timestamp: new Date().toISOString()\r\n    })\r\n\r\n    return createSuccessResponse(report, {\r\n      cacheStatus: 'BYPASS'\r\n    })\r\n\r\n  } catch (error) {\r\n    logInfo('Provider self-test failed', {\r\n      error: error.message,\r\n      timestamp: new Date().toISOString()\r\n    })\r\n\r\n    return createErrorResponse(\r\n      'Provider self-test failed',\r\n      500,\r\n      {\r\n        error: error.message,\r\n        type: 'SelfTestError'\r\n      }\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Create provider instances for testing\r\n */\r\nfunction createProviderInstances() {\r\n  return {\r\n    google: new GoogleProvider(),\r\n    serpapi: new SerpApiProvider(),\r\n    serper: new SerperProvider(),\r\n    yandex: new YandexProvider(),\r\n    brave: new BraveProvider(),\r\n    serphouse: new SerpHouseProvider(),\r\n    adultmedia: new AdultMediaProvider(),\r\n    qualityporn: new QualityPornProvider(),\r\n    apify: new ApifyProvider(),\r\n    scrapers: new ScrapersProvider(),\r\n    adapters: new AdaptersProvider()\r\n    // seznam: new SeznamProvider() // Disabled - API endpoint doesn't exist\r\n  }\r\n}\r\n\r\n/**\r\n * Run comprehensive health check across all providers\r\n * @param {Object} providers - Provider instances\r\n * @param {Object} env - Environment variables\r\n * @param {boolean} debug - Debug mode flag\r\n * @returns {Promise<Object>} Test results\r\n */\r\nasync function runProviderHealthCheck(providers, env, debug) {\r\n  const results = {}\r\n  const testQuery = 'jackprobe'\r\n\r\n  // Test each provider individually\r\n  for (const [providerName, provider] of Object.entries(providers)) {\r\n    try {\r\n      const startTime = Date.now()\r\n      const result = await testSingleProvider(providerName, provider, env, testQuery, debug)\r\n      result.timing_ms = Date.now() - startTime\r\n      results[providerName] = result\r\n    } catch (error) {\r\n      results[providerName] = {\r\n        provider: providerName,\r\n        status: 'fail',\r\n        mapped_error_code: ERROR_CODES.UNKNOWN,\r\n        skip_reason: null,\r\n        timing_ms: 0,\r\n        sample_payload_preview: null,\r\n        config_status: { missing: [], present: [] },\r\n        last_attempted_url: null,\r\n        explanation: `Unexpected error: ${error.message}`,\r\n        next_action: 'Check application logs for details'\r\n      }\r\n    }\r\n  }\r\n\r\n  return results\r\n}\r\n\r\n/**\r\n * Test a single provider\r\n * @param {string} providerName - Name of the provider\r\n * @param {Object} provider - Provider instance\r\n * @param {Object} env - Environment variables\r\n * @param {string} testQuery - Test query to use\r\n * @param {boolean} debug - Debug mode flag\r\n * @returns {Promise<Object>} Test result\r\n */\r\nasync function testSingleProvider(providerName, provider, env, testQuery, debug) {\r\n  const config = PROVIDER_CONFIGS[providerName]\r\n  const configStatus = validateProviderConfig(providerName, env)\r\n\r\n  // If config is invalid, skip the call\r\n  if (!configStatus.valid) {\r\n    return {\r\n      provider: providerName,\r\n      status: 'fail',\r\n      mapped_error_code: ERROR_CODES.BAD_PARAMS,\r\n      skip_reason: 'BAD_PARAMS',\r\n      timing_ms: 0,\r\n      sample_payload_preview: null,\r\n      config_status: configStatus,\r\n      last_attempted_url: null,\r\n      explanation: `Missing required configuration: ${configStatus.missing.join(', ')}`,\r\n      next_action: `Set environment variables: ${configStatus.missing.join(', ')}`\r\n    }\r\n  }\r\n\r\n  try {\r\n    // Create test options (bypass cache, minimal results)\r\n    const testOptions = {\r\n      limit: 3,\r\n      safeMode: true,\r\n      ledger: null, // Bypass ledger for self-test\r\n      cache_written: false // Ensure no cache writes\r\n    }\r\n\r\n    // Execute the test call\r\n    const results = await provider.search(testQuery, testOptions, env)\r\n\r\n    // Success case\r\n    const samplePayload = results.length > 0 ?\r\n      redactSecrets(JSON.stringify(results[0]).substring(0, 800)) : null\r\n\r\n    return {\r\n      provider: providerName,\r\n      status: 'ok',\r\n      mapped_error_code: null,\r\n      skip_reason: null,\r\n      timing_ms: 0, // Will be set by caller\r\n      sample_payload_preview: samplePayload,\r\n      config_status: configStatus,\r\n      last_attempted_url: null,\r\n      explanation: `Successfully returned ${results.length} results`,\r\n      next_action: null\r\n    }\r\n\r\n  } catch (error) {\r\n    const mappedError = mapProviderError(error, providerName)\r\n\r\n    return {\r\n      provider: providerName,\r\n      status: 'fail',\r\n      mapped_error_code: mappedError.code,\r\n      skip_reason: null,\r\n      timing_ms: 0, // Will be set by caller\r\n      sample_payload_preview: null,\r\n      config_status: configStatus,\r\n      last_attempted_url: mappedError.last_attempted_url,\r\n      explanation: mappedError.explanation,\r\n      next_action: mappedError.next_action\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Validate provider configuration\r\n * @param {string} providerName - Name of the provider\r\n * @param {Object} env - Environment variables\r\n * @returns {Object} Configuration validation result\r\n */\r\nfunction validateProviderConfig(providerName, env) {\r\n  const config = PROVIDER_CONFIGS[providerName]\r\n  const missing = []\r\n  const present = []\r\n\r\n  // Special handling for adultmedia - it can use either ADULTMEDIA_API_KEY or RAPIDAPI_KEY\r\n  if (providerName === 'adultmedia') {\r\n    const hasAdultMediaKey = env.ADULTMEDIA_API_KEY && env.ADULTMEDIA_API_KEY !== 'your_adultmedia_api_key_here' && !env.ADULTMEDIA_API_KEY.includes('your_')\r\n    const hasRapidApiKey = env.RAPIDAPI_KEY && env.RAPIDAPI_KEY !== 'your_rapidapi_key_here' && !env.RAPIDAPI_KEY.includes('your_')\r\n\r\n    if (hasAdultMediaKey) {\r\n      present.push('ADULTMEDIA_API_KEY')\r\n    } else if (hasRapidApiKey) {\r\n      present.push('RAPIDAPI_KEY')\r\n    } else {\r\n      missing.push('ADULTMEDIA_API_KEY or RAPIDAPI_KEY')\r\n    }\r\n  } else {\r\n    // Standard validation for other providers\r\n    for (const envVar of config.required) {\r\n      const value = env[envVar]\r\n      if (!value || value === `your_${envVar.toLowerCase()}_here` || value.includes('your_')) {\r\n        missing.push(envVar)\r\n      } else {\r\n        present.push(envVar)\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    valid: missing.length === 0,\r\n    missing,\r\n    present\r\n  }\r\n}\r\n\r\n/**\r\n * Map provider errors to canonical error codes\r\n * @param {Error} error - The error object\r\n * @param {string} providerName - Name of the provider\r\n * @returns {Object} Mapped error information\r\n */\r\nfunction mapProviderError(error, providerName) {\r\n  const message = error.message.toLowerCase()\r\n  const originalMessage = error.message\r\n\r\n  // Extract last attempted URL if present\r\n  let last_attempted_url = null\r\n  const urlMatch = originalMessage.match(/URL:\\s*(.+)/)\r\n  if (urlMatch) {\r\n    last_attempted_url = urlMatch[1]\r\n  }\r\n\r\n  // Check if the error message is already a canonical error code\r\n  const canonicalCodes = Object.values(ERROR_CODES)\r\n  if (canonicalCodes.includes(originalMessage)) {\r\n    return {\r\n      code: originalMessage,\r\n      explanation: `Provider returned canonical error: ${originalMessage}`,\r\n      next_action: 'Check provider-specific error details',\r\n      last_attempted_url\r\n    }\r\n  }\r\n\r\n  // Authentication errors\r\n  if (message.includes('invalid') && message.includes('key')) {\r\n    return {\r\n      code: ERROR_CODES.INVALID_AUTH,\r\n      explanation: 'API key is invalid or expired',\r\n      next_action: 'Check and rotate API key',\r\n      last_attempted_url\r\n    }\r\n  }\r\n\r\n  if (message.includes('unauthorized') || message.includes('403')) {\r\n    return {\r\n      code: ERROR_CODES.INVALID_AUTH,\r\n      explanation: 'Authentication failed - invalid credentials',\r\n      next_action: 'Verify API key and permissions',\r\n      last_attempted_url\r\n    }\r\n  }\r\n\r\n  // Host/header errors\r\n  if (message.includes('host') && message.includes('mismatch')) {\r\n    return {\r\n      code: ERROR_CODES.BAD_HOST,\r\n      explanation: 'RapidAPI host header mismatch',\r\n      next_action: 'Correct x-rapidapi-host header value',\r\n      last_attempted_url\r\n    }\r\n  }\r\n\r\n  // Parameter errors\r\n  if (message.includes('missing') && message.includes('param')) {\r\n    return {\r\n      code: ERROR_CODES.BAD_PARAMS,\r\n      explanation: 'Required parameters missing or malformed',\r\n      next_action: 'Check API documentation for required parameters',\r\n      last_attempted_url\r\n    }\r\n  }\r\n\r\n  // Specific HTTP status codes\r\n  if (message.includes('400')) {\r\n    return {\r\n      code: ERROR_CODES.BAD_PARAMS,\r\n      explanation: 'Bad request - invalid parameters or malformed request',\r\n      next_action: 'Check API documentation for correct parameter format',\r\n      last_attempted_url\r\n    }\r\n  }\r\n\r\n  if (message.includes('404')) {\r\n    return {\r\n      code: ERROR_CODES.BAD_HOST,\r\n      explanation: 'Resource not found - invalid endpoint or host',\r\n      next_action: 'Verify API endpoint URL and host configuration',\r\n      last_attempted_url\r\n    }\r\n  }\r\n\r\n  if (message.includes('422')) {\r\n    return {\r\n      code: ERROR_CODES.BAD_PARAMS,\r\n      explanation: 'Unprocessable entity - request parameters rejected by server',\r\n      next_action: 'Check parameter values and API documentation',\r\n      last_attempted_url\r\n    }\r\n  }\r\n\r\n  // Timeout errors\r\n  if (message.includes('timeout') || message.includes('abort')) {\r\n    return {\r\n      code: ERROR_CODES.TIMEOUT,\r\n      explanation: 'Request timed out',\r\n      next_action: 'Check network connectivity or increase timeout',\r\n      last_attempted_url\r\n    }\r\n  }\r\n\r\n  // Rate limit errors\r\n  if (message.includes('rate') && message.includes('limit')) {\r\n    return {\r\n      code: ERROR_CODES.RATE_LIMIT,\r\n      explanation: 'Rate limit exceeded',\r\n      next_action: 'Wait for rate limit reset or upgrade plan',\r\n      last_attempted_url\r\n    }\r\n  }\r\n\r\n  if (message.includes('429')) {\r\n    return {\r\n      code: ERROR_CODES.RATE_LIMIT,\r\n      explanation: 'Too many requests (HTTP 429)',\r\n      next_action: 'Implement request throttling or upgrade API plan',\r\n      last_attempted_url\r\n    }\r\n  }\r\n\r\n  // Quota errors\r\n  if (message.includes('quota') && message.includes('daily')) {\r\n    return {\r\n      code: ERROR_CODES.QUOTA_EXCEEDED_DAILY,\r\n      explanation: 'Daily quota exceeded',\r\n      next_action: 'Wait for daily reset or upgrade API plan',\r\n      last_attempted_url\r\n    }\r\n  }\r\n\r\n  if (message.includes('quota') && message.includes('monthly')) {\r\n    return {\r\n      code: ERROR_CODES.QUOTA_EXCEEDED_MONTHLY,\r\n      explanation: 'Monthly quota exceeded',\r\n      next_action: 'Upgrade API plan or wait for monthly reset',\r\n      last_attempted_url\r\n    }\r\n  }\r\n\r\n  // Network errors\r\n  if (message.includes('network') || message.includes('connection')) {\r\n    return {\r\n      code: ERROR_CODES.NETWORK_ERROR,\r\n      explanation: 'Network connectivity issue',\r\n      next_action: 'Check internet connection and DNS resolution',\r\n      last_attempted_url\r\n    }\r\n  }\r\n\r\n  // Upstream errors\r\n  if (message.includes('5') && message.includes('x')) {\r\n    return {\r\n      code: ERROR_CODES.UPSTREAM_ERROR,\r\n      explanation: 'Upstream API server error',\r\n      next_action: 'Check provider status page or try again later',\r\n      last_attempted_url\r\n    }\r\n  }\r\n\r\n  // Default to unknown\r\n  return {\r\n    code: ERROR_CODES.UNKNOWN,\r\n    explanation: `Unknown error: ${error.message}`,\r\n    next_action: 'Check application logs and API documentation',\r\n    last_attempted_url\r\n  }\r\n}\r\n\r\n/**\r\n * Redact secrets from payload preview\r\n * @param {string} payload - The payload string\r\n * @returns {string} Redacted payload\r\n */\r\nfunction redactSecrets(payload) {\r\n  if (!payload) return null\r\n\r\n  return payload\r\n    .replace(/(\"key\"\\s*:\\s*)\"[^\"]*\"/gi, '$1\"[REDACTED]\"')\r\n    .replace(/(\"token\"\\s*:\\s*)\"[^\"]*\"/gi, '$1\"[REDACTED]\"')\r\n    .replace(/(\"api_key\"\\s*:\\s*)\"[^\"]*\"/gi, '$1\"[REDACTED]\"')\r\n    .replace(/(\"Authorization\"\\s*:\\s*)\"[^\"]*\"/gi, '$1\"[REDACTED]\"')\r\n    .replace(/(\"X-API-KEY\"\\s*:\\s*)\"[^\"]*\"/gi, '$1\"[REDACTED]\"')\r\n    .replace(/(\"x-rapidapi-key\"\\s*:\\s*)\"[^\"]*\"/gi, '$1\"[REDACTED]\"')\r\n}\r\n\r\n/**\r\n * Generate consolidated report\r\n * @param {Object} results - Test results\r\n * @returns {Object} Consolidated report\r\n */\r\nfunction generateConsolidatedReport(results) {\r\n  const summary = {\r\n    total_providers: Object.keys(results).length,\r\n    healthy_providers: Object.values(results).filter(r => r.status === 'ok').length,\r\n    failed_providers: Object.values(results).filter(r => r.status === 'fail').length,\r\n    timestamp: new Date().toISOString(),\r\n    test_duration_ms: Date.now() - new Date().getTime() // This will be approximate\r\n  }\r\n\r\n  // Create summary table\r\n  const summaryTable = Object.entries(results).map(([provider, result]) => ({\r\n    provider,\r\n    status: result.status.toUpperCase(),\r\n    error_code: result.mapped_error_code || 'N/A',\r\n    timing_ms: result.timing_ms,\r\n    explanation: result.explanation\r\n  }))\r\n\r\n  return {\r\n    summary,\r\n    summary_table: summaryTable,\r\n    detailed_results: results,\r\n    human_readable_report: generateHumanReadableReport(results, summary)\r\n  }\r\n}\r\n\r\n/**\r\n * Generate human-readable report\r\n * @param {Object} results - Test results\r\n * @param {Object} summary - Summary statistics\r\n * @returns {string} Human-readable report\r\n */\r\nfunction generateHumanReadableReport(results, summary) {\r\n  let report = `\uD83D\uDE80 JACK PORTAL PROVIDER HEALTH CHECK REPORT\\n`\r\n  report += `\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\\n\\n`\r\n\r\n  report += `\uD83D\uDCCA SUMMARY\\n`\r\n  report += `\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n`\r\n  report += `Total Providers: ${summary.total_providers}\\n`\r\n  report += `\u2705 Healthy: ${summary.healthy_providers}\\n`\r\n  report += `\u274C Failed: ${summary.failed_providers}\\n`\r\n  report += `\u23F1\uFE0F  Generated: ${summary.timestamp}\\n\\n`\r\n\r\n  report += `\uD83D\uDCCB PROVIDER STATUS\\n`\r\n  report += `\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n`\r\n\r\n  for (const [provider, result] of Object.entries(results)) {\r\n    const statusIcon = result.status === 'ok' ? '\u2705' : '\u274C'\r\n    const timing = result.timing_ms ? ` (${result.timing_ms}ms)` : ''\r\n\r\n    report += `${statusIcon} ${provider.toUpperCase()}${timing}\\n`\r\n\r\n    if (result.mapped_error_code) {\r\n      report += `   Error: ${result.mapped_error_code}\\n`\r\n    }\r\n\r\n    report += `   ${result.explanation}\\n`\r\n\r\n    if (result.next_action) {\r\n      report += `   \u2192 ${result.next_action}\\n`\r\n    }\r\n\r\n    if (result.config_status.missing.length > 0) {\r\n      report += `   Missing config: ${result.config_status.missing.join(', ')}\\n`\r\n    }\r\n\r\n    report += `\\n`\r\n  }\r\n\r\n  report += `\uD83D\uDD27 TROUBLESHOOTING TIPS\\n`\r\n  report += `\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n`\r\n  report += `\u2022 Check environment variables in .dev.vars or Cloudflare dashboard\\n`\r\n  report += `\u2022 Verify API keys are valid and have sufficient quota\\n`\r\n  report += `\u2022 Ensure correct headers are being sent for each provider\\n`\r\n  report += `\u2022 Check provider status pages for outages\\n`\r\n  report += `\u2022 Review rate limits and implement backoff strategies\\n\\n`\r\n\r\n  return report\r\n}\r\n", "/**\r\n * Jack Portal - Cloudflare Worker\r\n * Multi-provider search API with intelligent caching\r\n *\r\n * @version 2.0.0\r\n * @author Jack Portal Team\r\n * @license MIT\r\n */\r\n\r\nimport { PORTAL_HTML } from './html.js'\r\nimport { handleAggregate } from './handlers/aggregate.js'\r\nimport { handleDiagnostics } from './handlers/diagnostics.js'\r\nimport { handleHealth } from './handlers/health.js'\r\nimport { handleProviderSelfTest } from './handlers/provider-selftest.js'\r\nimport { handleOptionsRequest, createErrorResponse } from './lib/response.js'\r\nimport {\r\n  logInfo,\r\n  logError,\r\n  logRequestStart,\r\n  logRequestEnd,\r\n  createRequestContext,\r\n  initLogLevel\r\n} from './lib/logger.js'\r\n\r\n/**\r\n * Main Cloudflare Worker export\r\n * Handles all incoming requests and routes them appropriately\r\n */\r\nexport default {\r\n  /**\r\n   * Fetch handler for all incoming requests\r\n   * @param {Request} request - The incoming HTTP request\r\n   * @param {Object} env - Environment variables and bindings\r\n   * @param {Object} ctx - Execution context\r\n   * @returns {Promise<Response>} The HTTP response\r\n   */\r\n  async fetch(request, env, ctx) {\r\n    const startTime = Date.now()\r\n    const requestId = crypto.randomUUID()\r\n    const url = new URL(request.url)\r\n    const method = request.method\r\n    const ip = request.headers.get('CF-Connecting-IP') ||\r\n               request.headers.get('X-Forwarded-For') ||\r\n               request.headers.get('X-Real-IP') ||\r\n               'unknown'\r\n\r\n    // Initialize log level from environment\r\n    initLogLevel(env)\r\n\r\n    // Log incoming request\r\n    logRequestStart({\r\n      requestId,\r\n      method,\r\n      path: url.pathname,\r\n      ip,\r\n      userAgent: request.headers.get('User-Agent')?.substring(0, 100)\r\n    })\r\n\r\n    try {\r\n      // Handle CORS preflight requests\r\n      if (method === 'OPTIONS') {\r\n        const response = handleOptionsRequest(request)\r\n        logRequestEnd({\r\n          requestId,\r\n          method,\r\n          path: url.pathname,\r\n          ip\r\n        }, Date.now() - startTime, response.status)\r\n        return response\r\n      }\r\n\r\n      // Handle health check endpoint\r\n      if (url.pathname === '/health') {\r\n        const response = await handleHealth(request, env)\r\n        logRequestEnd({\r\n          requestId,\r\n          method,\r\n          path: url.pathname,\r\n          ip\r\n        }, Date.now() - startTime, response.status)\r\n        return response\r\n      }\r\n\r\n      // Route to appropriate handler\r\n      if (url.pathname === '/api/search') {\r\n        const response = await handleAggregate(request, env)\r\n\r\n        // Add request tracking headers\r\n        const newResponse = new Response(response.body, response)\r\n        newResponse.headers.set('X-Request-ID', requestId)\r\n        newResponse.headers.set('X-Response-Time', `${Date.now() - startTime}ms`)\r\n        newResponse.headers.set('X-Powered-By', 'Jack-Portal/2.0.0')\r\n\r\n        logRequestEnd({\r\n          requestId,\r\n          method,\r\n          path: url.pathname,\r\n          ip\r\n        }, Date.now() - startTime, newResponse.status)\r\n        return newResponse\r\n      }\r\n\r\n      // Handle diagnostics endpoint for DEBUG mode\r\n      if (url.pathname === '/api/diagnostics' && url.searchParams.get('debug') === 'true') {\r\n        const response = await handleDiagnostics(request, env)\r\n        logRequestEnd({\r\n          requestId,\r\n          method,\r\n          path: url.pathname,\r\n          ip\r\n        }, Date.now() - startTime, response.status)\r\n        return response\r\n      }\r\n\r\n      // Handle provider self-test endpoint (requires DEBUG mode or X-Diag-Token)\r\n      if (url.pathname === '/api/provider-selftest') {\r\n        const response = await handleProviderSelfTest(request, env)\r\n        logRequestEnd({\r\n          requestId,\r\n          method,\r\n          path: url.pathname,\r\n          ip\r\n        }, Date.now() - startTime, response.status)\r\n        return response\r\n      }\r\n\r\n      // Handle provider self-test-all endpoint (alias for comprehensive testing)\r\n      if (url.pathname === '/api/provider-selftest-all') {\r\n        const response = await handleProviderSelfTest(request, env)\r\n        logRequestEnd({\r\n          requestId,\r\n          method,\r\n          path: url.pathname,\r\n          ip\r\n        }, Date.now() - startTime, response.status)\r\n        return response\r\n      }\r\n\r\n      // Serve static HTML for all other routes\r\n      const htmlResponse = new Response('Hello World', {\r\n        headers: {\r\n          'Content-Type': 'text/plain',\r\n          'X-Request-ID': requestId,\r\n          'X-Response-Time': `${Date.now() - startTime}ms`,\r\n          'Cache-Control': 'public, max-age=300' // Cache HTML for 5 minutes\r\n        }\r\n      })\r\n\r\n      logRequestEnd({\r\n        requestId,\r\n        method,\r\n        path: url.pathname,\r\n        ip\r\n      }, Date.now() - startTime, htmlResponse.status)\r\n      return htmlResponse\r\n\r\n    } catch (error) {\r\n      logError('Worker error', {\r\n        requestId,\r\n        method,\r\n        path: url.pathname,\r\n        ip,\r\n        error: error.message,\r\n        stack: error.stack,\r\n        responseTime: Date.now() - startTime\r\n      })\r\n\r\n      const errorResponse = createErrorResponse(\r\n        'Internal server error',\r\n        500,\r\n        {\r\n          requestId,\r\n          type: 'WorkerError'\r\n        }\r\n      )\r\n\r\n      logRequestEnd({\r\n        requestId,\r\n        method,\r\n        path: url.pathname,\r\n        ip\r\n      }, Date.now() - startTime, errorResponse.status)\r\n      return errorResponse\r\n    }\r\n  }\r\n}\r\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"C:\\\\Users\\\\tanne\\\\ProjectFolder\\\\Workspace\\\\src\\\\worker.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\tanne\\\\ProjectFolder\\\\Workspace\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\tanne\\\\ProjectFolder\\\\Workspace\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"C:\\\\Users\\\\tanne\\\\ProjectFolder\\\\Workspace\\\\src\\\\worker.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"C:\\\\Users\\\\tanne\\\\ProjectFolder\\\\Workspace\\\\.wrangler\\\\tmp\\\\bundle-DA81Xz\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\tanne\\\\ProjectFolder\\\\Workspace\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"C:\\\\Users\\\\tanne\\\\ProjectFolder\\\\Workspace\\\\.wrangler\\\\tmp\\\\bundle-DA81Xz\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"C:\\\\Users\\\\tanne\\\\ProjectFolder\\\\Workspace\\\\.wrangler\\\\tmp\\\\bundle-DA81Xz\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": ["now", "now", "now", "now", "now", "now", "now", "allowed", "now", "now", "now", "now", "now"]
}
